
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	INT_LITERAL	258
#define	STRING_LITERAL	259
#define	RAW_STRING_LITERAL	260
#define	ID	261
#define	TRUE	262
#define	FALSE	263
#define	FLOAT_LITERAL	264
#define	CHAR_LITERAL	265
#define	BOOL	266
#define	CHAR	267
#define	FLOAT	268
#define	INT	269
#define	STRING	270
#define	FOR	271
#define	LOOP	272
#define	WHILE	273
#define	IN	274
#define	CONTINUE	275
#define	IF	276
#define	ELSE	277
#define	LET	278
#define	MUT	279
#define	CONST	280
#define	FN	281
#define	ENUM	282
#define	STRUCT	283
#define	TRAIT	284
#define	IMPL	285
#define	SELF	286
#define	BIG_SELF	287
#define	PUB	288
#define	SELF_REF	289
#define	MUT_SELF_REF	290
#define	MUT_REF	291
#define	MOD	292
#define	SUPER	293
#define	RIGHT_ARROW	294
#define	BREAK	295
#define	RETURN	296
#define	RANGE	297
#define	OR	298
#define	AND	299
#define	EQUAL	300
#define	NOT_EQUAL	301
#define	LESS_EQUAL	302
#define	GREATER_EQUAL	303
#define	AS	304
#define	UMINUS	305
#define	USTAR	306
#define	DOUBLEDOTS	307

#line 1 "parser.y"

    #include <iostream>
    #include "classesnodes.h"
    void yyerror(char const* s);
    extern int yylex(void);
    using namespace std;
    ProgramNode* global_program;

#line 10 "parser.y"
typedef union {
    int int_literal;
	string* string_literal;
	string* identifier;
	bool bool_literal;
	float float_literal;
	char char_literal;
    enum Visibility vis;

    ProgramNode* prg;
    ExprNode* expr;
    ExprListNode * expr_list;
    StmtNode* stmt;
    StmtListNode* stmt_list;
    LetStmtNode* let_stmt;
    ModuleStmtNode* mod_stmt;
    ItemNode* item;
    ItemListNode* item_list;
    StructFieldNode* struct_item;
    StructFieldListNode* struct_items;
    StructStructNode* struct_;
    EnumStmtNode* enum_stmt;
    EnumItemNode* enum_item;
    EnumItemListNode* enum_items;
    FuncStmtNode* function_stmt;
    FuncParamNode* function_param;
    FuncParamListNode* function_params;
    ConstStmtNode* const_stmt;
    TraitNode* trait;
    ImplStmtNode* impl_stmt;
    TypeNode* type;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		436
#define	YYFLAG		-32768
#define	YYNTBASE	74

#define YYTRANSLATE(x) ((unsigned)(x) <= 307 ? yytranslate[x] : 125)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    62,     2,     2,     2,    60,    63,     2,    70,
    71,    58,    56,    72,    57,    67,    59,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    45,    39,    50,
    46,    51,    66,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    68,     2,    73,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    43,     2,    44,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    40,    41,    42,    47,    48,    49,    52,
    53,    54,    55,    61,    64,    65,    69
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     9,    11,    13,    15,    16,    18,
    20,    23,    25,    28,    30,    32,    34,    36,    38,    40,
    42,    44,    46,    53,    62,    69,    78,    79,    81,    83,
    85,    87,    89,    93,    97,   102,   107,   112,   114,   116,
   122,   126,   127,   129,   132,   134,   138,   142,   147,   153,
   154,   156,   159,   161,   164,   168,   173,   179,   180,   182,
   184,   187,   189,   193,   195,   198,   202,   206,   211,   216,
   222,   227,   233,   241,   242,   244,   246,   249,   251,   253,
   256,   259,   265,   273,   281,   287,   293,   299,   305,   313,
   321,   326,   333,   340,   347,   356,   365,   368,   370,   371,
   374,   376,   378,   380,   384,   388,   390,   392,   394,   396,
   398,   400,   402,   406,   410,   414,   418,   422,   426,   430,
   434,   438,   442,   446,   450,   454,   458,   462,   466,   470,
   474,   478,   482,   486,   490,   494,   498,   502,   506,   510,
   514,   518,   522,   526,   530,   534,   538,   542,   546,   550,
   554,   558,   562,   566,   570,   574,   578,   582,   586,   590,
   594,   598,   602,   606,   610,   614,   618,   622,   626,   629,
   632,   635,   638,   641,   644,   647,   650,   653,   656,   659,
   662,   666,   672,   678,   684,   690,   695,   700,   705,   710,
   714,   718,   720,   722,   725,   728,   730,   733,   736,   739,
   742,   746,   750,   754,   758,   760,   763,   766,   770,   774,
   781,   788,   790,   795,   800,   804,   808,   812,   816,   818,
   820,   822,   826,   828,   831,   835,   839,   843,   845,   847,
   849,   853,   857,   862,   865,   867,   869,   871,   874,   878,
   882,   888,   894,   896,   900,   902,   906,   910,   914,   916,
   918,   920,   922,   924,   926,   932,   938,   940,   945
};

static const short yyrhs[] = {    77,
     0,    76,     0,    75,    76,     0,    39,     0,   106,     0,
   107,     0,   104,     0,     0,    78,     0,    79,     0,    78,
    79,     0,    80,     0,   124,    80,     0,    81,     0,    87,
     0,    95,     0,    99,     0,   103,     0,   104,     0,   105,
     0,    82,     0,    83,     0,    26,     6,    70,    84,    71,
    39,     0,    26,     6,    70,    84,    71,    40,   123,    39,
     0,    26,     6,    70,    84,    71,   115,     0,    26,     6,
    70,    84,    71,    40,   123,   115,     0,     0,    85,     0,
    31,     0,    34,     0,    35,     0,    86,     0,    85,    72,
    86,     0,     6,    45,   123,     0,    24,     6,    45,   123,
     0,     6,    45,    36,   123,     0,     6,    45,    63,   123,
     0,    88,     0,    92,     0,    28,     6,    43,    89,    44,
     0,    28,     6,    39,     0,     0,    90,     0,    90,    72,
     0,    91,     0,    90,    72,    91,     0,     6,    45,   123,
     0,   124,     6,    45,   123,     0,    28,     6,    70,    93,
    71,     0,     0,    94,     0,    94,    72,     0,   123,     0,
   124,   123,     0,    94,    72,   123,     0,    94,    72,   124,
   123,     0,    27,     6,    43,    96,    44,     0,     0,    72,
     0,    97,     0,    97,    72,     0,    98,     0,    97,    72,
    98,     0,     6,     0,   124,     6,     0,     6,    46,   114,
     0,     6,    46,   110,     0,   124,     6,    46,   114,     0,
   124,     6,    46,   110,     0,   124,     6,    43,    89,    44,
     0,     6,    43,    89,    44,     0,    30,   123,    43,   100,
    44,     0,    30,   111,    16,   123,    43,   100,    44,     0,
     0,   101,     0,   102,     0,   101,   102,     0,    81,     0,
   104,     0,   124,    81,     0,   124,   104,     0,    29,     6,
    43,   100,    44,     0,    25,     6,    45,   123,    46,   114,
    39,     0,    25,     6,    45,   123,    46,   110,    39,     0,
    25,     6,    45,   123,    39,     0,    37,     6,    43,    77,
    44,     0,    23,     6,    46,   114,    39,     0,    23,     6,
    46,   110,    39,     0,    23,     6,    45,   123,    46,   114,
    39,     0,    23,     6,    45,   123,    46,   110,    39,     0,
    23,    24,     6,    39,     0,    23,    24,     6,    45,   123,
    39,     0,    23,    24,     6,    46,   114,    39,     0,    23,
    24,     6,    46,   110,    39,     0,    23,    24,     6,    45,
   123,    46,   114,    39,     0,    23,    24,     6,    45,   123,
    46,   110,    39,     0,   110,    39,     0,   114,     0,     0,
   109,    72,     0,   109,     0,   114,     0,   110,     0,   109,
    72,   114,     0,   109,    72,   110,     0,    10,     0,     4,
     0,     5,     0,     3,     0,     9,     0,     7,     0,     8,
     0,   110,    56,   110,     0,   110,    56,   114,     0,   114,
    56,   110,     0,   114,    56,   114,     0,   110,    57,   110,
     0,   110,    57,   114,     0,   114,    57,   110,     0,   114,
    57,   114,     0,   110,    59,   110,     0,   110,    59,   114,
     0,   114,    59,   110,     0,   114,    59,   114,     0,   110,
    58,   110,     0,   110,    58,   114,     0,   114,    58,   110,
     0,   114,    58,   114,     0,   110,    60,   110,     0,   110,
    60,   114,     0,   114,    60,   110,     0,   114,    60,   114,
     0,   110,    49,   110,     0,   110,    49,   114,     0,   114,
    49,   110,     0,   114,    49,   114,     0,   110,    48,   110,
     0,   110,    48,   114,     0,   114,    48,   110,     0,   114,
    48,   114,     0,   110,    46,   110,     0,   110,    46,   114,
     0,   114,    46,   110,     0,   114,    46,   114,     0,   110,
    52,   110,     0,   110,    52,   114,     0,   114,    52,   110,
     0,   114,    52,   114,     0,   110,    53,   110,     0,   110,
    53,   114,     0,   114,    53,   110,     0,   114,    53,   114,
     0,   110,    51,   110,     0,   110,    51,   114,     0,   114,
    51,   110,     0,   114,    51,   114,     0,   110,    50,   110,
     0,   110,    50,   114,     0,   114,    50,   110,     0,   114,
    50,   114,     0,   110,    55,   110,     0,   110,    55,   114,
     0,   114,    55,   110,     0,   114,    55,   114,     0,   110,
    54,   110,     0,   110,    54,   114,     0,   114,    54,   110,
     0,   114,    54,   114,     0,    57,   110,     0,    57,   114,
     0,    62,   110,     0,    62,   114,     0,   110,    66,     0,
   114,    66,     0,    58,   110,     0,    58,   114,     0,    63,
   110,     0,    63,   114,     0,    36,   114,     0,    36,   110,
     0,    68,   108,    73,     0,    68,   110,    39,   110,    73,
     0,    68,   110,    39,   114,    73,     0,    68,   114,    39,
   110,    73,     0,    68,   114,    39,   114,    73,     0,   110,
    68,   110,    73,     0,   110,    68,   114,    73,     0,   114,
    68,   110,    73,     0,   114,    68,   114,    73,     0,   110,
    67,     3,     0,   114,    67,     3,     0,    20,     0,    41,
     0,    41,   110,     0,    41,   114,     0,    47,     0,    47,
   110,     0,    47,   114,     0,   110,    47,     0,   114,    47,
     0,   110,    47,   110,     0,   110,    47,   114,     0,   114,
    47,   110,     0,   114,    47,   114,     0,    42,     0,    42,
   110,     0,    42,   114,     0,   110,    67,     6,     0,   114,
    67,     6,     0,   110,    67,     6,    70,   108,    71,     0,
   114,    67,     6,    70,   108,    71,     0,   111,     0,   111,
    70,   108,    71,     0,   110,    43,   112,    44,     0,    70,
   114,    71,     0,    70,   110,    71,     0,   114,    61,   123,
     0,   110,    61,   123,     0,     6,     0,    38,     0,    31,
     0,   111,    69,     6,     0,   113,     0,    72,   113,     0,
   112,    72,   113,     0,     6,    45,   110,     0,     6,    45,
   114,     0,   115,     0,   116,     0,   120,     0,    43,    75,
    44,     0,    43,   110,    44,     0,    43,    75,   110,    44,
     0,    43,    44,     0,   117,     0,   118,     0,   119,     0,
    17,   115,     0,    18,   114,   115,     0,    18,   110,   115,
     0,    16,     6,    19,   114,   115,     0,    16,     6,    19,
   110,   115,     0,   121,     0,   121,    22,   115,     0,   122,
     0,   121,    22,   122,     0,    21,   110,   115,     0,    21,
   114,   115,     0,    11,     0,    12,     0,    13,     0,    14,
     0,    15,     0,   111,     0,    68,   123,    39,   114,    73,
     0,    68,   123,    39,   110,    73,     0,    33,     0,    33,
    70,    38,    71,     0,    33,    70,    31,    71,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   140,   146,   147,   150,   151,   152,   153,   156,   157,   160,
   161,   164,   165,   168,   169,   170,   171,   172,   173,   174,
   179,   180,   183,   184,   187,   188,   191,   192,   195,   196,
   197,   198,   199,   202,   203,   204,   205,   210,   211,   214,
   215,   218,   219,   220,   223,   224,   227,   228,   233,   236,
   237,   238,   241,   242,   243,   244,   249,   252,   253,   254,
   255,   258,   259,   262,   263,   264,   265,   266,   267,   268,
   269,   274,   275,   278,   279,   282,   283,   287,   288,   289,
   290,   296,   301,   302,   303,   308,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   325,   326,   332,   333,
   334,   337,   338,   339,   340,   343,   344,   345,   346,   347,
   348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
   358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
   368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
   378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
   398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
   408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
   418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
   428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
   438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
   448,   449,   450,   451,   452,   453,   454,   455,   459,   460,
   461,   462,   467,   468,   469,   471,   472,   475,   476,   477,
   481,   482,   483,   484,   487,   488,   489,   492,   495,   496,
   499,   500,   503,   504,   508,   509,   512,   513,   519,   520,
   521,   522,   523,   524,   525,   526,   532,   533,   534
};

static const char * const yytname[] = {   "$","error","$undefined.","INT_LITERAL",
"STRING_LITERAL","RAW_STRING_LITERAL","ID","TRUE","FALSE","FLOAT_LITERAL","CHAR_LITERAL",
"BOOL","CHAR","FLOAT","INT","STRING","FOR","LOOP","WHILE","IN","CONTINUE","IF",
"ELSE","LET","MUT","CONST","FN","ENUM","STRUCT","TRAIT","IMPL","SELF","BIG_SELF",
"PUB","SELF_REF","MUT_SELF_REF","MUT_REF","MOD","SUPER","';'","RIGHT_ARROW",
"BREAK","RETURN","'{'","'}'","':'","'='","RANGE","OR","AND","'<'","'>'","EQUAL",
"NOT_EQUAL","LESS_EQUAL","GREATER_EQUAL","'+'","'-'","'*'","'/'","'%'","AS",
"'!'","'&'","UMINUS","USTAR","'?'","'.'","'['","DOUBLEDOTS","'('","')'","','",
"']'","Program","StmtList","Stmt","ItemListEmpty","ItemList","Item","SimpleItem",
"FuncStmt","DecFuncStmt","ImplFuncStmt","FuncParamListEmpty","FuncParamList",
"FuncParam","StructStmt","StructStruct","StructFieldListEmpty","StructFieldList",
"StructField","TupleStruct","TupleFieldListEmpty","TupleFieldList","EnumStmt",
"EnumItemListEmpty","EnumItemList","EnumItem","ImplStmt","AssociatedItemListEmpty",
"AssociatedItemList","AssociatedItem","TraitStmt","ConstStmt","ModuleStmt","LetStmt",
"ExprStmt","ExprListEmpty","ExprList","ExprWithoutBlock","PathCallExpr","StructExprFieldList",
"StructExprField","ExprWithBlock","BlockExpr","LoopExpr","InfiniteLoopExpr",
"PredicateLoopExpr","IteratorLoopExpr","IfExpr","SimpleIfElseExpr","SimpleIfExpr",
"Type","Visibility",""
};
#endif

static const short yyr1[] = {     0,
    74,    75,    75,    76,    76,    76,    76,    77,    77,    78,
    78,    79,    79,    80,    80,    80,    80,    80,    80,    80,
    81,    81,    82,    82,    83,    83,    84,    84,    85,    85,
    85,    85,    85,    86,    86,    86,    86,    87,    87,    88,
    88,    89,    89,    89,    90,    90,    91,    91,    92,    93,
    93,    93,    94,    94,    94,    94,    95,    96,    96,    96,
    96,    97,    97,    98,    98,    98,    98,    98,    98,    98,
    98,    99,    99,   100,   100,   101,   101,   102,   102,   102,
   102,   103,   104,   104,   104,   105,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   106,   107,   107,   108,   108,
   108,   109,   109,   109,   109,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   111,   111,
   111,   111,   112,   112,   112,   113,   113,   114,   114,   114,
   115,   115,   115,   115,   116,   116,   116,   117,   118,   118,
   119,   119,   120,   120,   121,   121,   122,   122,   123,   123,
   123,   123,   123,   123,   123,   123,   124,   124,   124
};

static const short yyr2[] = {     0,
     1,     1,     2,     1,     1,     1,     1,     0,     1,     1,
     2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     6,     8,     6,     8,     0,     1,     1,     1,
     1,     1,     3,     3,     4,     4,     4,     1,     1,     5,
     3,     0,     1,     2,     1,     3,     3,     4,     5,     0,
     1,     2,     1,     2,     3,     4,     5,     0,     1,     1,
     2,     1,     3,     1,     2,     3,     3,     4,     4,     5,
     4,     5,     7,     0,     1,     1,     2,     1,     1,     2,
     2,     5,     7,     7,     5,     5,     5,     5,     7,     7,
     4,     6,     6,     6,     8,     8,     2,     1,     0,     2,
     1,     1,     1,     3,     3,     1,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     3,     5,     5,     5,     5,     4,     4,     4,     4,     3,
     3,     1,     1,     2,     2,     1,     2,     2,     2,     2,
     3,     3,     3,     3,     1,     2,     2,     3,     3,     6,
     6,     1,     4,     4,     3,     3,     3,     3,     1,     1,
     1,     3,     1,     2,     3,     3,     3,     1,     1,     1,
     3,     3,     4,     2,     1,     1,     1,     2,     3,     3,
     5,     5,     1,     3,     1,     3,     3,     3,     1,     1,
     1,     1,     1,     1,     5,     5,     1,     4,     4
};

static const short yydefact[] = {     8,
     0,     0,     0,     0,     0,     0,   257,     0,     1,     9,
    10,    12,    14,    21,    22,    15,    38,    39,    16,    17,
    18,    19,    20,     0,     0,     0,     0,     0,     0,   219,
   249,   250,   251,   252,   253,   221,   220,     0,   254,     0,
     0,     0,    11,    13,     0,    27,    58,    41,    42,    50,
    74,   254,     0,     0,     0,    74,     0,     0,     8,     0,
     0,     0,    29,    30,    31,     0,    28,    32,    64,    59,
     0,    60,    62,     0,     0,     0,    43,    45,     0,     0,
    51,    53,     0,    78,     0,    75,    76,    79,     0,     0,
     0,   222,     0,   259,   258,     0,    85,     0,     0,     0,
     0,     0,    42,     0,    57,    61,    65,     0,    40,    44,
     0,    49,    52,    54,    82,    77,    80,    81,   109,   107,
   108,   111,   112,   110,   106,     0,     0,     0,   192,     0,
     0,   193,   205,     0,   196,     0,     0,     0,     0,    99,
     0,     0,   212,     0,   228,   229,   235,   236,   237,   230,
   243,   245,    74,    72,    86,     0,     0,     0,     0,    34,
     0,    23,     0,    25,    33,     0,    67,    66,    63,    42,
     0,    47,    46,     0,    55,     0,     0,   238,     0,     0,
     0,     0,   180,   179,   194,   195,   206,   207,     0,     4,
   234,     0,     2,     7,     5,     6,     0,    98,   197,   198,
   169,   170,   175,   176,   171,   172,   177,   178,     0,   101,
   103,   102,     0,     0,     0,     0,   199,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   173,     0,     0,   256,    99,     0,   200,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   174,     0,     0,   255,     0,     0,    84,    83,
    36,    37,    35,     0,    71,     0,    69,    68,    48,    56,
     0,     0,   240,   239,   247,   248,     0,     0,   231,     3,
     0,    97,   232,   181,   100,     0,     0,   216,   215,     0,
     0,     0,   223,   141,   142,   201,   202,   137,   138,   133,
   134,   157,   158,   153,   154,   145,   146,   149,   150,   165,
   166,   161,   162,   113,   114,   117,   118,   125,   126,   121,
   122,   129,   130,   218,   190,   208,     0,     0,     0,   103,
   102,   143,   144,   203,   204,   139,   140,   135,   136,   159,
   160,   155,   156,   147,   148,   151,   152,   167,   168,   163,
   164,   115,   116,   119,   120,   127,   128,   123,   124,   131,
   132,   217,   191,   209,     0,     0,   244,   246,    73,    24,
    26,    70,     0,     0,   219,     0,     0,     0,   233,   105,
   104,     0,     0,     0,     0,     0,   224,   214,     0,    99,
   186,   187,   213,    99,   188,   189,   242,   241,     0,     0,
     0,    91,     0,     0,   182,   183,   184,   185,   226,   227,
   225,     0,     0,     0,    88,    87,     0,     0,     0,   210,
   211,     0,     0,    92,     0,    94,    93,    90,    89,     0,
     0,    96,    95,     0,     0,     0
};

static const short yydefgoto[] = {   434,
   192,   193,     9,    10,    11,    12,    13,    14,    15,    66,
    67,    68,    16,    17,    76,    77,    78,    18,    80,    81,
    19,    71,    72,    73,    20,    85,    86,    87,    21,    22,
    23,   195,   196,   209,   210,   330,   143,   292,   293,   198,
   145,   146,   147,   148,   149,   150,   151,   152,    40,    79
};

static const short yypact[] = {   170,
    34,    57,    73,    81,    86,   316,   -54,   125,-32768,   170,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    69,    28,   -15,   111,   -29,   113,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   316,   -12,   130,
    36,   146,-32768,-32768,   316,     3,    14,-32768,    25,   173,
    39,    98,   141,   316,   187,    39,   134,   138,   170,    22,
   156,   202,-32768,-32768,-32768,   139,   140,-32768,    84,-32768,
   169,   142,-32768,   211,   171,   174,   147,-32768,   214,   150,
   151,-32768,   316,-32768,   178,    39,-32768,-32768,    -1,   700,
   181,-32768,   199,-32768,-32768,   201,-32768,   700,   273,   217,
   121,    29,    25,   700,-32768,    27,   123,   316,-32768,    25,
   218,-32768,   173,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   258,   229,   700,-32768,   700,
   700,   700,   700,   560,   768,   700,   700,   700,   700,   700,
   700,   352,   107,  1281,-32768,-32768,-32768,-32768,-32768,-32768,
   251,-32768,    39,-32768,-32768,   961,  1114,   316,   316,-32768,
   316,-32768,   316,-32768,-32768,   236,  1421,  1522,-32768,    25,
   700,-32768,-32768,   316,-32768,   316,   264,-32768,  1447,  1473,
  1447,  1473,    49,   124,  1421,  1522,  1421,  1522,    30,-32768,
-32768,   632,-32768,-32768,-32768,-32768,   909,  1522,  1567,  1589,
    49,   124,    49,   124,    49,   124,    49,   124,   225,   230,
   987,  1137,  1255,  1496,    16,   700,   768,   700,   700,   700,
   700,   700,   700,   700,   700,   700,   700,   700,   700,   700,
   316,-32768,   168,   700,-32768,   700,   700,   768,   700,   700,
   700,   700,   700,   700,   700,   700,   700,   700,   700,   700,
   700,   316,-32768,   172,   700,-32768,     9,   259,-32768,-32768,
-32768,-32768,-32768,   -28,-32768,   268,  1421,  1522,-32768,-32768,
   700,   477,-32768,-32768,-32768,-32768,   137,   310,-32768,-32768,
   935,-32768,-32768,-32768,   700,   700,   700,-32768,-32768,   272,
   313,   -21,-32768,  1545,  1522,  1567,  1589,   322,  1609,  1628,
  1647,   210,   233,   210,   233,   210,   233,   210,   233,   210,
   233,   210,   233,    52,   247,    52,   247,    23,    67,    23,
    67,    23,    67,-32768,-32768,   250,   794,  1309,   252,  1421,
  1522,  1545,  1522,  1567,  1589,   322,  1609,  1628,  1647,   210,
   233,   210,   233,   210,   233,   210,   233,   210,   233,   210,
   233,    52,   247,    52,   247,    23,    67,    23,    67,    23,
    67,-32768,-32768,   255,   822,  1337,-32768,-32768,-32768,-32768,
-32768,-32768,  1447,  1473,   272,   316,   700,     4,-32768,  1421,
  1522,   850,  1365,   878,  1393,   700,-32768,-32768,   313,   700,
-32768,-32768,-32768,   700,-32768,-32768,-32768,-32768,   275,  1013,
  1160,-32768,   316,   700,-32768,-32768,-32768,-32768,  1421,  1522,
-32768,   261,   262,   700,-32768,-32768,    90,  1039,  1183,-32768,
-32768,  1065,  1206,-32768,   700,-32768,-32768,-32768,-32768,  1091,
  1229,-32768,-32768,   326,   334,-32768
};

static const short yypgoto[] = {-32768,
-32768,   143,   278,-32768,   328,   318,   -44,-32768,-32768,-32768,
-32768,   238,-32768,-32768,   -85,-32768,   234,-32768,-32768,-32768,
-32768,-32768,-32768,   237,-32768,   -50,-32768,   260,-32768,   -30,
-32768,-32768,-32768,  -231,-32768,    10,    -6,-32768,  -288,   220,
   -99,-32768,-32768,-32768,-32768,-32768,-32768,    88,   -37,    19
};


#define	YYLAST		1715


static const short yytable[] = {    39,
    53,   164,   387,    54,   329,    93,    84,    60,    61,    48,
   370,    84,    82,    49,   134,    41,    91,   166,    24,    69,
    88,   290,   388,     1,     2,    88,    62,   178,    24,   130,
    75,    52,    69,    63,    61,   277,    64,    65,    52,    25,
    50,    84,   402,    52,   117,   114,     7,    52,   403,   404,
   389,   134,    62,   278,    46,    88,    55,     7,   118,     7,
    97,   160,    26,     1,     2,    74,    57,    98,    83,    89,
   172,     7,    45,    58,    89,   175,    52,    24,    27,   273,
   274,   275,   276,   231,   266,    70,    28,   291,   232,   233,
   234,    29,    52,     1,     2,     3,     4,     5,     6,   142,
   411,    52,   258,   194,    89,     8,    52,   156,    84,   228,
   229,   230,   231,   167,   232,   233,   234,   232,   233,   234,
   261,   262,    88,   263,    74,   264,   103,   252,   424,   104,
    42,   176,   253,   254,   255,   425,   269,   179,   270,   181,
   183,   185,   187,   197,   199,   201,   203,   205,   207,   211,
   213,    52,    52,    47,    52,    51,    52,   367,   412,   162,
   163,   194,   413,   134,   371,   170,    55,    52,   171,    52,
   325,    89,    56,   326,   363,    55,   236,   364,    30,    90,
   267,   376,   377,    31,    32,    33,    34,    35,    59,   253,
   254,   255,    92,   324,     1,     2,     3,     4,     5,     6,
    99,   281,     7,    36,    94,     7,     8,   100,    95,   101,
    37,   102,   105,   106,   362,   108,   107,   109,   110,   111,
   112,   115,   113,   153,    52,   294,   296,   298,   300,   302,
   304,   306,   308,   310,   312,   314,   316,   318,   320,   322,
    38,   194,   154,   327,   155,    52,   332,   334,   336,   338,
   340,   342,   344,   346,   348,   350,   352,   354,   356,   358,
   360,   161,   174,   177,   365,   226,   227,   228,   229,   230,
   231,   134,   257,   397,   398,   232,   233,   234,    30,   265,
   373,   197,   271,    31,    32,    33,    34,    35,   247,   248,
   249,   250,   251,   252,   380,   382,   384,   284,   253,   254,
   255,   285,   369,    36,   249,   250,   251,   252,   158,   144,
    37,   372,   253,   254,   255,   378,   386,   157,   290,   390,
   414,    30,   393,   168,   394,   435,    31,    32,    33,    34,
    35,   420,   421,   436,   280,   159,    96,    43,   399,   165,
    38,    44,   169,   173,   368,   116,    36,   180,     0,   182,
   184,   186,   188,    37,   200,   202,   204,   206,   208,   212,
   214,     0,     0,     0,     0,   417,     0,     0,     0,    52,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,    38,     0,     0,   400,   232,   233,   234,
   268,     0,     0,     0,   215,   409,    52,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   418,     0,     0,     0,   232,   233,   234,
     0,     0,     0,   422,   235,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   430,   295,   297,   299,   301,   303,
   305,   307,   309,   311,   313,   315,   317,   319,   321,   323,
     0,     0,     0,   328,     0,   331,   333,   335,   337,   339,
   341,   343,   345,   347,   349,   351,   353,   355,   357,   359,
   361,     0,     0,     0,   366,     0,     0,     0,     0,   119,
   120,   121,   375,   122,   123,   124,   125,     0,     0,     0,
   374,     0,   126,   127,   128,     0,   129,   130,     0,   189,
     0,     1,     0,     0,   381,   383,   385,    36,     0,     0,
     0,     0,   131,     0,    37,   190,     0,   132,   133,   134,
   191,     0,     0,   135,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,   137,     0,     0,     0,   138,   139,
     0,     0,     0,     0,   140,     0,   141,     0,   291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,   120,   121,    30,   122,   123,   124,   125,
     0,     0,     0,     0,     0,   126,   127,   128,     0,   129,
   130,     0,   189,     0,     1,     0,     0,     0,     0,     0,
    36,     0,     0,     0,     0,   131,   401,    37,   190,     0,
   132,   133,   134,   191,     0,   410,   135,     0,     0,   331,
     0,     0,     0,   331,     0,     0,   136,   137,     0,     0,
     0,   138,   139,   419,     0,     0,     0,   140,     0,   141,
     0,     0,     0,   423,   119,   120,   121,    30,   122,   123,
   124,   125,     0,     0,   431,     0,     0,   126,   127,   128,
     0,   129,   130,     0,   189,     0,     1,     0,     0,     0,
     0,     0,    36,     0,     0,     0,     0,   131,     0,    37,
   190,     0,   132,   133,   134,   279,     0,     0,   135,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   136,   137,
     0,     0,     0,   138,   139,     0,     0,     0,     0,   140,
     0,   141,   119,   120,   121,    30,   122,   123,   124,   125,
     0,     0,     0,     0,     0,   126,   127,   128,     0,   129,
   130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    36,     0,     0,     0,     0,   131,     0,    37,     0,     0,
   132,   133,   134,     0,     0,     0,   135,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   136,   137,     0,     0,
     0,   138,   139,     0,     0,     0,     0,   140,     0,   141,
   119,   120,   121,    30,   122,   123,   124,   125,     0,     0,
     0,     0,     0,   126,   127,   128,     0,   129,   130,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
     0,     0,     0,   131,     0,    37,     0,     0,   132,   133,
     0,     0,     0,     0,-32768,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   136,   137,     0,     0,     0,   138,
   139,     0,     0,     0,     0,   140,   215,   141,     0,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   230,   231,     0,     0,     0,     0,   232,
   233,   234,     0,     0,   215,     0,   391,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,     0,     0,     0,     0,   232,   233,   234,
     0,     0,   215,     0,   395,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
   231,     0,     0,     0,     0,   232,   233,   234,     0,     0,
   215,     0,   405,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,     0,
     0,     0,     0,   232,   233,   234,     0,   282,     0,     0,
   407,   215,   283,     0,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     0,     0,     0,   282,   232,   233,   234,   215,   379,     0,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,   231,     0,     0,     0,   259,
   232,   233,   234,   215,     0,     0,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,     0,     0,     0,   286,   232,   233,   234,   215,
     0,     0,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,     0,     0,
     0,   415,   232,   233,   234,   215,     0,     0,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   230,   231,     0,     0,     0,   426,   232,   233,
   234,   215,     0,     0,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     0,     0,     0,   428,   232,   233,   234,   215,     0,     0,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,   231,     0,     0,     0,   432,
   232,   233,   234,   215,     0,     0,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,   260,     0,     0,     0,   232,   233,   234,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   287,     0,     0,     0,   253,
   254,   255,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   416,     0,
     0,     0,   253,   254,   255,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   427,     0,     0,     0,   253,   254,   255,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   429,     0,     0,     0,   253,   254,
   255,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   433,     0,     0,
     0,   253,   254,   255,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     0,     0,     0,     0,   253,   254,   255,   215,     0,     0,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,   231,     0,     0,     0,     0,
   232,   233,   234,     0,     0,   288,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,     0,     0,     0,     0,   253,   254,   255,     0,
     0,     0,     0,   256,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     0,     0,     0,     0,   253,   254,   255,     0,     0,     0,
     0,   392,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,     0,     0,
     0,     0,   253,   254,   255,     0,     0,     0,     0,   396,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,     0,     0,     0,     0,
   253,   254,   255,     0,     0,     0,     0,   406,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,     0,     0,     0,     0,   253,   254,
   255,     0,     0,   215,     0,   408,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,     0,     0,     0,     0,   232,   233,   234,   272,
     0,     0,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,     0,     0,
     0,     0,   232,   233,   234,   134,     0,     0,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,     0,     0,     0,     0,   253,   254,
   255,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,     0,     0,     0,
     0,   253,   254,   255,     0,     0,   289,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,     0,     0,     0,     0,   253,   254,   255,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,   230,   231,     0,     0,     0,     0,
   232,   233,   234,-32768,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   230,   231,     0,     0,
     0,     0,   232,   233,   234,-32768,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     0,     0,     0,     0,   253,   254,   255,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     0,     0,     0,     0,   253,   254,   255,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,     0,
     0,     0,     0,   232,   233,   234,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,     0,     0,
     0,     0,   253,   254,   255
};

static const short yycheck[] = {     6,
    38,   101,   291,    16,   236,    56,    51,    45,     6,    39,
    39,    56,    50,    43,    43,    70,    54,   103,     0,     6,
    51,     6,    44,    25,    26,    56,    24,   127,    10,    21,
     6,    38,     6,    31,     6,     6,    34,    35,    45,     6,
    70,    86,    39,    50,    89,    83,    33,    54,    45,    46,
    72,    43,    24,    24,    70,    86,    69,    33,    89,    33,
    39,    99,     6,    25,    26,    47,    31,    46,    50,    51,
   108,    33,    45,    38,    56,   113,    83,    59,     6,   179,
   180,   181,   182,    61,   170,    72,     6,    72,    66,    67,
    68,     6,    99,    25,    26,    27,    28,    29,    30,    90,
   389,   108,   153,   134,    86,    37,   113,    98,   153,    58,
    59,    60,    61,   104,    66,    67,    68,    66,    67,    68,
   158,   159,   153,   161,   106,   163,    43,    61,    39,    46,
     6,   113,    66,    67,    68,    46,   174,   128,   176,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   158,   159,    43,   161,    43,   163,   257,   390,    39,
    40,   192,   394,    43,   264,    43,    69,   174,    46,   176,
     3,   153,    43,     6,     3,    69,    70,     6,     6,    39,
   171,    45,    46,    11,    12,    13,    14,    15,    43,    66,
    67,    68,     6,   231,    25,    26,    27,    28,    29,    30,
    45,   192,    33,    31,    71,    33,    37,     6,    71,    71,
    38,    72,    44,    72,   252,    45,     6,    44,    72,     6,
    71,    44,    72,    43,   231,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
    68,   272,    44,   234,    44,   252,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,    45,    45,     6,   255,    56,    57,    58,    59,    60,
    61,    43,    22,   373,   374,    66,    67,    68,     6,    44,
   271,   272,    19,    11,    12,    13,    14,    15,    56,    57,
    58,    59,    60,    61,   285,   286,   287,    73,    66,    67,
    68,    72,    44,    31,    58,    59,    60,    61,    36,    90,
    38,    44,    66,    67,    68,     6,    45,    98,     6,    70,
    46,     6,    71,   104,    70,     0,    11,    12,    13,    14,
    15,    71,    71,     0,   192,    63,    59,    10,   376,   102,
    68,    24,   106,   110,   257,    86,    31,   128,    -1,   130,
   131,   132,   133,    38,   135,   136,   137,   138,   139,   140,
   141,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,   376,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    68,    -1,    -1,   377,    66,    67,    68,
   171,    -1,    -1,    -1,    43,   386,   403,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,   404,    -1,    -1,    -1,    66,    67,    68,
    -1,    -1,    -1,   414,    73,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   425,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
    -1,    -1,    -1,   234,    -1,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,    -1,    -1,    -1,   255,    -1,    -1,    -1,    -1,     3,
     4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
   271,    -1,    16,    17,    18,    -1,    20,    21,    -1,    23,
    -1,    25,    -1,    -1,   285,   286,   287,    31,    -1,    -1,
    -1,    -1,    36,    -1,    38,    39,    -1,    41,    42,    43,
    44,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    57,    58,    -1,    -1,    -1,    62,    63,
    -1,    -1,    -1,    -1,    68,    -1,    70,    -1,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    20,
    21,    -1,    23,    -1,    25,    -1,    -1,    -1,    -1,    -1,
    31,    -1,    -1,    -1,    -1,    36,   377,    38,    39,    -1,
    41,    42,    43,    44,    -1,   386,    47,    -1,    -1,   390,
    -1,    -1,    -1,   394,    -1,    -1,    57,    58,    -1,    -1,
    -1,    62,    63,   404,    -1,    -1,    -1,    68,    -1,    70,
    -1,    -1,    -1,   414,     3,     4,     5,     6,     7,     8,
     9,    10,    -1,    -1,   425,    -1,    -1,    16,    17,    18,
    -1,    20,    21,    -1,    23,    -1,    25,    -1,    -1,    -1,
    -1,    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,    38,
    39,    -1,    41,    42,    43,    44,    -1,    -1,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,
    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,    68,
    -1,    70,     3,     4,     5,     6,     7,     8,     9,    10,
    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    20,
    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    31,    -1,    -1,    -1,    -1,    36,    -1,    38,    -1,    -1,
    41,    42,    43,    -1,    -1,    -1,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,    -1,    -1,
    -1,    62,    63,    -1,    -1,    -1,    -1,    68,    -1,    70,
     3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
    -1,    -1,    -1,    16,    17,    18,    -1,    20,    21,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
    -1,    -1,    -1,    36,    -1,    38,    -1,    -1,    41,    42,
    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    57,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    68,    43,    70,    -1,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,
    67,    68,    -1,    -1,    43,    -1,    73,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    -1,    -1,    -1,    -1,    66,    67,    68,
    -1,    -1,    43,    -1,    73,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    -1,
    43,    -1,    73,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    66,    67,    68,    -1,    39,    -1,    -1,
    73,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    39,    66,    67,    68,    43,    44,    -1,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    39,
    66,    67,    68,    43,    -1,    -1,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    -1,    -1,    -1,    39,    66,    67,    68,    43,
    -1,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    39,    66,    67,    68,    43,    -1,    -1,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    39,    66,    67,
    68,    43,    -1,    -1,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    39,    66,    67,    68,    43,    -1,    -1,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    39,
    66,    67,    68,    43,    -1,    -1,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    39,    -1,    -1,    -1,    66,    67,    68,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    39,    -1,    -1,    -1,    66,
    67,    68,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    39,    -1,
    -1,    -1,    66,    67,    68,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    39,    -1,    -1,    -1,    66,    67,    68,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    39,    -1,    -1,    -1,    66,    67,
    68,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    39,    -1,    -1,
    -1,    66,    67,    68,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    66,    67,    68,    43,    -1,    -1,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    66,    67,    68,    -1,    -1,    71,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,
    -1,    -1,    -1,    73,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    -1,    -1,
    -1,    73,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    66,    67,    68,    -1,    -1,    -1,    -1,    73,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    66,    67,    68,    -1,    -1,    -1,    -1,    73,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,    67,
    68,    -1,    -1,    43,    -1,    73,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    -1,    -1,    -1,    -1,    66,    67,    68,    43,
    -1,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    66,    67,    68,    43,    -1,    -1,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,    67,
    68,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    66,    67,    68,    -1,    -1,    71,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    -1,    -1,    -1,    -1,    66,    67,    68,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    66,    67,    68,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    66,    67,    68,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    66,    67,    68,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    66,    67,    68,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    66,    67,    68,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    66,    67,    68
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 140 "parser.y"
{ yyval.prg = global_program = new ProgramNode(yyvsp[0].item_list); ;
    break;}
case 2:
#line 146 "parser.y"
{ yyval.stmt_list = new StmtListNode(yyvsp[0].stmt); ;
    break;}
case 3:
#line 147 "parser.y"
{ yyval.stmt_list = StmtListNode::Append(yyvsp[-1].stmt_list, yyvsp[0].stmt); ;
    break;}
case 4:
#line 150 "parser.y"
{ yyval.stmt = NULL; ;
    break;}
case 5:
#line 151 "parser.y"
{ yyval.stmt = new StmtNode(StmtNode::let, NULL, NULL, yyvsp[0].let_stmt); ;
    break;}
case 6:
#line 152 "parser.y"
{ yyval.stmt = yyvsp[0].stmt;;
    break;}
case 7:
#line 153 "parser.y"
{ yyval.stmt = StmtNode::ConstStmtToStmt(yyvsp[0].const_stmt);
    break;}
case 8:
#line 156 "parser.y"
{ yyval.item_list = 0; ;
    break;}
case 9:
#line 157 "parser.y"
{ yyval.item_list = new ItemListNode(yyvsp[0].item_list); ;
    break;}
case 10:
#line 160 "parser.y"
{ yyval.item_list = new ItemListNode(yyvsp[0].item); ;
    break;}
case 11:
#line 161 "parser.y"
{ yyval.item_list = ItemListNode::Append(yyvsp[-1].item_list, yyvsp[0].item); ;
    break;}
case 12:
#line 164 "parser.y"
{ yyval.item = yyvsp[0].item;;
    break;}
case 13:
#line 165 "parser.y"
{ yyval.item = ItemNode::AddVisibility(yyvsp[-1].vis, yyvsp[0].item);;
    break;}
case 14:
#line 168 "parser.y"
{ yyval.item = ItemNode::DeclarationFunction(self, yyvsp[0].function_stmt); ;
    break;}
case 15:
#line 169 "parser.y"
{ yyval.item = ItemNode::DeclarationStruct(self, yyvsp[0].struct_); ;
    break;}
case 16:
#line 170 "parser.y"
{ yyval.item = ItemNode::DeclarationEnum(self, yyvsp[0].enum_stmt); ;
    break;}
case 17:
#line 171 "parser.y"
{ yyval.item = ItemNode::DeclarationImpl(self, yyvsp[0].impl_stmt); ;
    break;}
case 18:
#line 172 "parser.y"
{ yyval.item = ItemNode::DeclarationTrait(self, yyvsp[0].trait); ;
    break;}
case 19:
#line 173 "parser.y"
{ yyval.item = ItemNode::DeclarationConst(self, yyvsp[0].const_stmt); ;
    break;}
case 20:
#line 174 "parser.y"
{ yyval.item = ItemNode::DeclarationModule(self, yyvsp[0].mod_stmt); ;
    break;}
case 21:
#line 179 "parser.y"
{ yyval.function_stmt = yyvsp[0].function_stmt; ;
    break;}
case 22:
#line 180 "parser.y"
{ yyval.function_stmt = yyvsp[0].function_stmt; ;
    break;}
case 23:
#line 183 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-4].identifier, 0, yyvsp[-2].function_params, 0); ;
    break;}
case 24:
#line 184 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-6].identifier, yyvsp[-1].type, yyvsp[-4].function_params, 0); ;
    break;}
case 25:
#line 187 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-4].identifier, 0, yyvsp[-2].function_params, yyvsp[0].expr); ;
    break;}
case 26:
#line 188 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-6].identifier, yyvsp[-1].type, yyvsp[-4].function_params, yyvsp[0].expr); ;
    break;}
case 27:
#line 191 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::static_, 0); ;
    break;}
case 28:
#line 192 "parser.y"
{ yyval.function_params = yyvsp[0].function_params; ;
    break;}
case 29:
#line 195 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::self, 0); ;
    break;}
case 30:
#line 196 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::self_ref, 0); ;
    break;}
case 31:
#line 197 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::mut_self_ref, 0); ;
    break;}
case 32:
#line 198 "parser.y"
{ yyval.function_params = new FuncParamListNode(FuncParamListNode::static_, yyvsp[0].function_param); ;
    break;}
case 33:
#line 199 "parser.y"
{ yyval.function_params = FuncParamListNode::Append(yyvsp[-2].function_params, yyvsp[0].function_param); ;
    break;}
case 34:
#line 202 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-2].identifier, yyvsp[0].type, FuncParamNode::noMut); ;
    break;}
case 35:
#line 203 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-2].identifier, yyvsp[0].type, FuncParamNode::mut); ;
    break;}
case 36:
#line 204 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-3].identifier, yyvsp[0].type, FuncParamNode::mut_ref); ;
    break;}
case 37:
#line 205 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-3].identifier, yyvsp[0].type, FuncParamNode::link); ;
    break;}
case 38:
#line 210 "parser.y"
{ yyval.struct_ = yyvsp[0].struct_; ;
    break;}
case 39:
#line 211 "parser.y"
{ yyval.struct_ = yyvsp[0].struct_; ;
    break;}
case 40:
#line 214 "parser.y"
{ yyval.struct_ = new StructStructNode(yyvsp[-3].identifier, yyvsp[-1].struct_items); ;
    break;}
case 41:
#line 215 "parser.y"
{ yyval.struct_ = new StructStructNode(yyvsp[-1].identifier, 0); ;
    break;}
case 42:
#line 218 "parser.y"
{ yyval.struct_items = 0; ;
    break;}
case 43:
#line 219 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[0].struct_items); ;
    break;}
case 44:
#line 220 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[-1].struct_items); ;
    break;}
case 45:
#line 223 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[0].struct_item); ;
    break;}
case 46:
#line 224 "parser.y"
{ yyval.struct_items = StructFieldListNode::Append(yyvsp[-2].struct_items, yyvsp[0].struct_item); ;
    break;}
case 47:
#line 227 "parser.y"
{ yyval.struct_item = new StructFieldNode(yyvsp[-2].identifier, yyvsp[0].type, self); ;
    break;}
case 48:
#line 228 "parser.y"
{ yyval.struct_item = new StructFieldNode(yyvsp[-2].identifier, yyvsp[0].type, yyvsp[-3].vis); ;
    break;}
case 49:
#line 233 "parser.y"
{ yyval.struct_ = new StructStructNode(yyvsp[-3].identifier, yyvsp[-1].struct_items); ;
    break;}
case 50:
#line 236 "parser.y"
{ yyval.struct_items = 0; ;
    break;}
case 51:
#line 237 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[0].struct_items); ;
    break;}
case 52:
#line 238 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[-1].struct_items); ;
    break;}
case 53:
#line 241 "parser.y"
{ yyval.struct_items = new StructFieldListNode(new StructFieldNode(0, yyvsp[0].type, self)); ;
    break;}
case 54:
#line 242 "parser.y"
{ yyval.struct_items = new StructFieldListNode(new StructFieldNode(0, yyvsp[0].type, yyvsp[-1].vis)); ;
    break;}
case 55:
#line 243 "parser.y"
{ yyval.struct_items = StructFieldListNode::Append(yyvsp[-2].struct_items, new StructFieldNode(0, yyvsp[0].type, self)); ;
    break;}
case 56:
#line 244 "parser.y"
{ yyval.struct_items = StructFieldListNode::Append(yyvsp[-3].struct_items, new StructFieldNode(0, yyvsp[0].type, yyvsp[-1].vis)); ;
    break;}
case 57:
#line 249 "parser.y"
{ yyval.enum_stmt = new EnumStmtNode(yyvsp[-3].identifier, yyvsp[-1].enum_items); ;
    break;}
case 58:
#line 252 "parser.y"
{ yyval.enum_items = 0; ;
    break;}
case 59:
#line 253 "parser.y"
{ yyval.enum_items = 0; ;
    break;}
case 60:
#line 254 "parser.y"
{ yyval.enum_items = new EnumItemListNode(yyvsp[0].enum_items); ;
    break;}
case 61:
#line 255 "parser.y"
{ yyval.enum_items = new EnumItemListNode(yyvsp[-1].enum_items); ;
    break;}
case 62:
#line 258 "parser.y"
{ yyval.enum_items = new EnumItemListNode(yyvsp[0].enum_item); ;
    break;}
case 63:
#line 259 "parser.y"
{ yyval.enum_items = EnumItemListNode::Append(yyvsp[-2].enum_items, yyvsp[0].enum_item); ;
    break;}
case 64:
#line 262 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[0].identifier, self, 0, 0); ;
    break;}
case 65:
#line 263 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[0].identifier, yyvsp[-1].vis, 0, 0); ;
    break;}
case 66:
#line 264 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, self, NULL, yyvsp[0].expr); ;
    break;}
case 67:
#line 265 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, self, 0, yyvsp[0].expr); ;
    break;}
case 68:
#line 266 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, yyvsp[-3].vis, 0, yyvsp[0].expr); ;
    break;}
case 69:
#line 267 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, yyvsp[-3].vis, 0, yyvsp[0].expr); ;
    break;}
case 70:
#line 268 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-3].identifier, yyvsp[-4].vis, yyvsp[-1].struct_items, 0); ;
    break;}
case 71:
#line 269 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-3].identifier, self, yyvsp[-1].struct_items, 0); ;
    break;}
case 72:
#line 274 "parser.y"
{ yyval.impl_stmt = new ImplStmtNode(ImplStmtNode::inherent, yyvsp[-3].type, 0, yyvsp[-1].item_list); ;
    break;}
case 73:
#line 275 "parser.y"
{ yyval.impl_stmt = new ImplStmtNode(ImplStmtNode::trait, yyvsp[-3].type, yyvsp[-5].expr, yyvsp[-1].item_list); ;
    break;}
case 74:
#line 278 "parser.y"
{ yyval.item_list = NULL; ;
    break;}
case 75:
#line 279 "parser.y"
{ yyval.item_list = yyvsp[0].item_list; ;
    break;}
case 76:
#line 282 "parser.y"
{ yyval.item_list = yyval.item_list = new ItemListNode(yyvsp[0].item); ;
    break;}
case 77:
#line 283 "parser.y"
{ yyval.item_list = yyval.item_list = ItemListNode::Append(yyvsp[-1].item_list, yyvsp[0].item); ;
    break;}
case 78:
#line 287 "parser.y"
{ yyval.item = ItemNode::DeclarationFunction(self, yyvsp[0].function_stmt); ;
    break;}
case 79:
#line 288 "parser.y"
{ yyval.item = ItemNode::DeclarationConst(self, yyvsp[0].const_stmt); ;
    break;}
case 80:
#line 289 "parser.y"
{ yyval.item = ItemNode::DeclarationFunction(yyvsp[-1].vis, yyvsp[0].function_stmt); ;
    break;}
case 81:
#line 290 "parser.y"
{ yyval.item = ItemNode::DeclarationConst(yyvsp[-1].vis, yyvsp[0].const_stmt); ;
    break;}
case 82:
#line 296 "parser.y"
{ yyval.trait = new TraitNode(yyvsp[-3].identifier, yyvsp[-1].item_list); ;
    break;}
case 83:
#line 301 "parser.y"
{ yyval.const_stmt = ConstStmtNode::ConstStmt(yyvsp[-5].identifier, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 84:
#line 302 "parser.y"
{ yyval.const_stmt = ConstStmtNode::ConstStmt(yyvsp[-5].identifier, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 85:
#line 303 "parser.y"
{ yyval.const_stmt = ConstStmtNode::ConstStmt(yyvsp[-3].identifier, yyvsp[-1].type, 0); ;
    break;}
case 86:
#line 308 "parser.y"
{ yyval.mod_stmt = new ModuleStmtNode(yyvsp[-3].identifier, yyvsp[-1].item_list); ;
    break;}
case 87:
#line 312 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 88:
#line 313 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 89:
#line 314 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 90:
#line 315 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 91:
#line 316 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-1].identifier, 0, LetStmtNode::mut, 0); ;
    break;}
case 92:
#line 317 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, yyvsp[-1].type, LetStmtNode::mut, 0); ;
    break;}
case 93:
#line 318 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 94:
#line 319 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 95:
#line 320 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 96:
#line 321 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 97:
#line 325 "parser.y"
{yyval.stmt = new StmtNode(StmtNode::exprstmt, yyvsp[-1].expr, 0, 0);;
    break;}
case 98:
#line 326 "parser.y"
{yyval.stmt = new StmtNode(StmtNode::exprstmt, yyvsp[0].expr, 0, 0);;
    break;}
case 99:
#line 332 "parser.y"
{ yyval.expr_list = 0; ;
    break;}
case 100:
#line 333 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[-1].expr_list); ;
    break;}
case 101:
#line 334 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr_list); ;
    break;}
case 102:
#line 337 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 103:
#line 338 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 104:
#line 339 "parser.y"
{ yyval.expr_list = ExprListNode::Append(yyvsp[-2].expr_list, yyvsp[0].expr); ;
    break;}
case 105:
#line 340 "parser.y"
{ yyval.expr_list = ExprListNode::Append(yyvsp[-2].expr_list, yyvsp[0].expr); ;
    break;}
case 106:
#line 343 "parser.y"
{ yyval.expr = ExprNode::ExprFromCharLiteral(ExprNode::char_lit, yyvsp[0].char_literal); ;
    break;}
case 107:
#line 344 "parser.y"
{ yyval.expr = ExprNode::ExprFromStringLiteral(ExprNode::string_lit, yyvsp[0].string_literal);  ;
    break;}
case 108:
#line 345 "parser.y"
{ yyval.expr = ExprNode::ExprFromStringLiteral(ExprNode::raw_string_lit, yyvsp[0].string_literal); ;
    break;}
case 109:
#line 346 "parser.y"
{ yyval.expr = ExprNode::ExprFromIntLiteral(ExprNode::int_lit, yyvsp[0].int_literal); ;
    break;}
case 110:
#line 347 "parser.y"
{ yyval.expr = ExprNode::ExprFromFloatLiteral(ExprNode::float_lit, yyvsp[0].float_literal); ;
    break;}
case 111:
#line 348 "parser.y"
{ yyval.expr = ExprNode::ExprFromBoolLiteral(ExprNode::bool_lit, yyvsp[0].bool_literal); ;
    break;}
case 112:
#line 349 "parser.y"
{ yyval.expr = ExprNode::ExprFromBoolLiteral(ExprNode::bool_lit, yyvsp[0].bool_literal); ;
    break;}
case 113:
#line 350 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 114:
#line 351 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 115:
#line 352 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 116:
#line 353 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 117:
#line 354 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 118:
#line 355 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 119:
#line 356 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 120:
#line 357 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 121:
#line 358 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 122:
#line 359 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 123:
#line 360 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 124:
#line 361 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 125:
#line 362 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 126:
#line 363 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 127:
#line 364 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 128:
#line 365 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 129:
#line 366 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 130:
#line 367 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 131:
#line 368 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 132:
#line 369 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 133:
#line 370 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 134:
#line 371 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 135:
#line 372 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 136:
#line 373 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 137:
#line 374 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 138:
#line 375 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 139:
#line 376 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 140:
#line 377 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 141:
#line 378 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 142:
#line 379 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 143:
#line 380 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 144:
#line 381 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 145:
#line 382 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 146:
#line 383 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 147:
#line 384 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 148:
#line 385 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 149:
#line 386 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 150:
#line 387 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 151:
#line 388 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 152:
#line 389 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 153:
#line 390 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 154:
#line 391 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 155:
#line 392 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 156:
#line 393 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 157:
#line 394 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 158:
#line 395 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 159:
#line 396 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 160:
#line 397 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 161:
#line 398 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 162:
#line 399 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 163:
#line 400 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 164:
#line 401 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 165:
#line 402 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 166:
#line 403 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 167:
#line 404 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 168:
#line 405 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 169:
#line 406 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::uminus, yyvsp[0].expr, 0); ;
    break;}
case 170:
#line 407 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::uminus, yyvsp[0].expr, 0); ;
    break;}
case 171:
#line 408 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::negotation, yyvsp[0].expr, 0); ;
    break;}
case 172:
#line 409 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::negotation, yyvsp[0].expr, 0); ;
    break;}
case 173:
#line 410 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::question, yyvsp[-1].expr, 0); ;
    break;}
case 174:
#line 411 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::question, yyvsp[-1].expr, 0); ;
    break;}
case 175:
#line 412 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::ustar, yyvsp[0].expr, 0); ;
    break;}
case 176:
#line 413 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::ustar, yyvsp[0].expr, 0); ;
    break;}
case 177:
#line 414 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::link, yyvsp[0].expr, 0); ;
    break;}
case 178:
#line 415 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::link, yyvsp[0].expr, 0); ;
    break;}
case 179:
#line 416 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mut_link, yyvsp[0].expr, 0); ;
    break;}
case 180:
#line 417 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mut_link, yyvsp[0].expr, 0); ;
    break;}
case 181:
#line 418 "parser.y"
{ yyval.expr = ExprNode::ArrExprFromList(ExprNode::array_expr, yyvsp[-1].expr_list); ;
    break;}
case 182:
#line 419 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 183:
#line 420 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 184:
#line 421 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 185:
#line 422 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 186:
#line 423 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 187:
#line 424 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 188:
#line 425 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 189:
#line 426 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 190:
#line 427 "parser.y"
{ yyval.expr = ExprNode::TupleExpr(ExprNode::tuple_expr, yyvsp[-2].expr, yyvsp[0].int_literal); ;
    break;}
case 191:
#line 428 "parser.y"
{ yyval.expr = ExprNode::TupleExpr(ExprNode::tuple_expr, yyvsp[-2].expr, yyvsp[0].int_literal); ;
    break;}
case 192:
#line 429 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::continue_expr, 0, 0); ;
    break;}
case 193:
#line 430 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::break_expr, 0, 0); ;
    break;}
case 194:
#line 431 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::break_with_val_expr, yyvsp[0].expr, 0); ;
    break;}
case 195:
#line 432 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::break_with_val_expr, yyvsp[0].expr, 0); ;
    break;}
case 196:
#line 433 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_right, 0, 0); ;
    break;}
case 197:
#line 434 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_right, yyvsp[0].expr, 0); ;
    break;}
case 198:
#line 435 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_right, yyvsp[0].expr, 0); ;
    break;}
case 199:
#line 436 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_left, yyvsp[-1].expr, 0); ;
    break;}
case 200:
#line 437 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_left, yyvsp[-1].expr, 0); ;
    break;}
case 201:
#line 438 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 202:
#line 439 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 203:
#line 440 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 204:
#line 441 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 205:
#line 442 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::return_expr, 0, 0); ;
    break;}
case 206:
#line 443 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::return_expr, yyvsp[0].expr, 0); ;
    break;}
case 207:
#line 444 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::return_expr, yyvsp[0].expr, 0); ;
    break;}
case 208:
#line 445 "parser.y"
{ yyval.expr = ExprNode::CallAccessExpr(ExprNode::field_access_expr, yyvsp[0].identifier, yyvsp[-2].expr, 0); ;
    break;}
case 209:
#line 446 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::field_access_expr, yyvsp[0].identifier, yyvsp[-2].expr, 0); ;
    break;}
case 210:
#line 447 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::method_expr, yyvsp[-3].identifier, yyvsp[-5].expr, yyvsp[-1].expr_list); ;
    break;}
case 211:
#line 448 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::method_expr, yyvsp[-3].identifier, yyvsp[-5].expr, yyvsp[-1].expr_list); ;
    break;}
case 212:
#line 449 "parser.y"
{ yyval.expr = yyvsp[0].expr ;
    break;}
case 213:
#line 450 "parser.y"
{ yyval.expr = ExprNode::StaticMethod(ExprNode::static_method, yyvsp[-3].expr, yyvsp[-1].expr_list); ;
    break;}
case 214:
#line 451 "parser.y"
{ yyval.expr = ExprNode::FieldListAccess(ExprNode::struct_creation, yyvsp[-3].expr, yyvsp[-1].expr_list); ;
    break;}
case 215:
#line 452 "parser.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 216:
#line 453 "parser.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 217:
#line 454 "parser.y"
{ yyval.expr = ExprNode::AsExpr(yyvsp[-2].expr, yyvsp[0].type);;
    break;}
case 218:
#line 455 "parser.y"
{yyval.expr = ExprNode::AsExpr(yyvsp[-2].expr, yyvsp[0].type);;
    break;}
case 219:
#line 459 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::id_, yyvsp[0].identifier, 0, 0); ;
    break;}
case 220:
#line 460 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::super_expr, new string("super"), 0, 0); ;
    break;}
case 221:
#line 461 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::self_expr, new string("self"), 0, 0); ;
    break;}
case 222:
#line 462 "parser.y"
{ yyval.expr = ExprNode::PathCallExpr(ExprNode::path_call_expr, yyvsp[0].identifier, yyvsp[-2].expr); ;
    break;}
case 223:
#line 467 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 224:
#line 468 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 225:
#line 469 "parser.y"
{ yyval.expr_list = ExprListNode::Append(yyvsp[-2].expr_list, yyvsp[0].expr); ;
    break;}
case 226:
#line 471 "parser.y"
{ yyval.expr = ExprNode::ExprFromStructField(ExprNode::struct_field_expr, yyvsp[-2].identifier, yyvsp[0].expr); ;
    break;}
case 227:
#line 472 "parser.y"
{ yyval.expr = ExprNode::ExprFromStructField(ExprNode::struct_field_expr, yyvsp[-2].identifier, yyvsp[0].expr); ;
    break;}
case 228:
#line 475 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 229:
#line 476 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 230:
#line 477 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 231:
#line 481 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, 0, yyvsp[-1].stmt_list); ;
    break;}
case 232:
#line 482 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, yyvsp[-1].expr, 0); ;
    break;}
case 233:
#line 483 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, yyvsp[-1].expr, yyvsp[-2].stmt_list); ;
    break;}
case 234:
#line 484 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, 0, 0); ;
    break;}
case 235:
#line 487 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 236:
#line 488 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 237:
#line 489 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 238:
#line 492 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_expr, 0, yyvsp[0].expr, 0); ;
    break;}
case 239:
#line 495 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_while, yyvsp[-1].expr, yyvsp[0].expr, 0); ;
    break;}
case 240:
#line 496 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_while, yyvsp[-1].expr, yyvsp[0].expr, 0); ;
    break;}
case 241:
#line 499 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_for, yyvsp[-1].expr, yyvsp[0].expr, yyvsp[-3].identifier); ;
    break;}
case 242:
#line 500 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_for, yyvsp[-1].expr, yyvsp[0].expr, yyvsp[-3].identifier); ;
    break;}
case 243:
#line 503 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 244:
#line 504 "parser.y"
{ yyval.expr = ExprNode::AddElseBlock(yyvsp[-2].expr, yyvsp[0].expr) ;
    break;}
case 245:
#line 508 "parser.y"
{ yyval.expr = ExprNode::IfExprList(yyvsp[0].expr); ;
    break;}
case 246:
#line 509 "parser.y"
{ yyval.expr = ExprNode::AddIfBlock(yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 247:
#line 512 "parser.y"
{ yyval.expr = ExprNode::IfExpr(ExprNode::if_expr, yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 248:
#line 513 "parser.y"
{ yyval.expr = ExprNode::IfExpr(ExprNode::if_expr, yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 249:
#line 519 "parser.y"
{ yyval.type = new TypeNode(TypeNode::bool_); ;
    break;}
case 250:
#line 520 "parser.y"
{ yyval.type = new TypeNode(TypeNode::char_); ;
    break;}
case 251:
#line 521 "parser.y"
{ yyval.type = new TypeNode(TypeNode::float_); ;
    break;}
case 252:
#line 522 "parser.y"
{ yyval.type = new TypeNode(TypeNode::int_); ;
    break;}
case 253:
#line 523 "parser.y"
{ yyval.type = new TypeNode(TypeNode::string_); ;
    break;}
case 254:
#line 524 "parser.y"
{ yyval.type = new TypeNode(TypeNode::path_call_expr_, yyvsp[0].expr); ;
    break;}
case 255:
#line 525 "parser.y"
{ yyval.type = new TypeNode(TypeNode::array_, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 256:
#line 526 "parser.y"
{ yyval.type = new TypeNode(TypeNode::array_, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 257:
#line 532 "parser.y"
{ yyval.vis = pub; ;
    break;}
case 258:
#line 533 "parser.y"
{ yyval.vis = self; ;
    break;}
case 259:
#line 534 "parser.y"
{ yyval.vis = super; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 537 "parser.y"


void yyerror(char const *s)
{
    printf("%s\n",s);
}
