
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	INT_LITERAL	258
#define	STRING_LITERAL	259
#define	RAW_STRING_LITERAL	260
#define	ID	261
#define	TRUE	262
#define	FALSE	263
#define	FLOAT_LITERAL	264
#define	CHAR_LITERAL	265
#define	BOOL	266
#define	CHAR	267
#define	FLOAT	268
#define	INT	269
#define	STRING	270
#define	FOR	271
#define	LOOP	272
#define	WHILE	273
#define	IN	274
#define	CONTINUE	275
#define	IF	276
#define	ELSE	277
#define	LET	278
#define	MUT	279
#define	CONST	280
#define	FN	281
#define	ENUM	282
#define	STRUCT	283
#define	TRAIT	284
#define	IMPL	285
#define	SELF	286
#define	BIG_SELF	287
#define	PUB	288
#define	SELF_REF	289
#define	MUT_SELF_REF	290
#define	MUT_REF	291
#define	MOD	292
#define	SUPER	293
#define	RIGHT_ARROW	294
#define	BREAK	295
#define	RETURN	296
#define	RANGE	297
#define	OR	298
#define	AND	299
#define	EQUAL	300
#define	NOT_EQUAL	301
#define	LESS_EQUAL	302
#define	GREATER_EQUAL	303
#define	UMINUS	304
#define	USTAR	305
#define	DOUBLEDOTS	306

#line 1 "parser.y"

    #include <iostream>
    #include "classesnodes.h"
    void yyerror(char const* s);
    extern int yylex(void);
    using namespace std;
    ProgramNode* global_program;

#line 10 "parser.y"
typedef union {
    int int_literal;
	string* string_literal;
	string* identifier;
	bool bool_literal;
	float float_literal;
	char char_literal;
    enum Visibility vis;

    ProgramNode* prg;
    ExprNode* expr;
    ExprListNode * expr_list;
    StmtNode* stmt;
    StmtListNode* stmt_list;
    LetStmtNode* let_stmt;
    ModuleStmtNode* mod_stmt;
    ItemNode* item;
    ItemListNode* item_list;
    StructFieldNode* struct_item;
    StructFieldListNode* struct_items;
    StructStructNode* struct_;
    EnumStmtNode* enum_stmt;
    EnumItemNode* enum_item;
    EnumItemListNode* enum_items;
    FuncStmtNode* function_stmt;
    FuncParamNode* function_param;
    FuncParamListNode* function_params;
    ConstStmtNode* const_stmt;
    AssociatedItemNode* associated_item;
    AssociatedItemListNode* associated_items;
    TraitNode* trait;
    ImplStmtNode* impl_stmt;
    TypeNode* type;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		433
#define	YYFLAG		-32768
#define	YYNTBASE	73

#define YYTRANSLATE(x) ((unsigned)(x) <= 306 ? yytranslate[x] : 124)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    61,     2,     2,     2,    60,    62,     2,    69,
    70,    58,    56,    71,    57,    66,    59,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    45,    39,    50,
    46,    51,    65,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    67,     2,    72,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    43,     2,    44,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    40,    41,    42,    47,    48,    49,    52,
    53,    54,    55,    63,    64,    68
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     9,    11,    13,    14,    16,    18,
    21,    23,    26,    28,    30,    32,    34,    36,    38,    40,
    42,    44,    51,    60,    67,    76,    77,    79,    81,    83,
    85,    87,    91,    95,   100,   105,   110,   112,   114,   120,
   124,   125,   127,   130,   132,   136,   140,   145,   151,   152,
   154,   157,   159,   162,   166,   171,   177,   178,   180,   182,
   185,   187,   191,   193,   196,   200,   204,   209,   214,   220,
   225,   231,   239,   240,   242,   244,   247,   249,   251,   254,
   257,   263,   271,   279,   285,   289,   295,   301,   307,   315,
   323,   328,   335,   342,   349,   358,   367,   370,   373,   374,
   377,   379,   381,   383,   387,   391,   393,   395,   397,   399,
   401,   403,   405,   409,   413,   417,   421,   425,   429,   433,
   437,   441,   445,   449,   453,   457,   461,   465,   469,   473,
   477,   481,   485,   489,   493,   497,   501,   505,   509,   513,
   517,   521,   525,   529,   533,   537,   541,   545,   549,   553,
   557,   561,   565,   569,   573,   577,   581,   585,   589,   593,
   597,   601,   605,   609,   613,   617,   621,   625,   629,   632,
   635,   638,   641,   644,   647,   650,   653,   656,   659,   662,
   665,   669,   675,   681,   687,   693,   698,   703,   708,   713,
   717,   721,   723,   725,   728,   731,   733,   736,   739,   742,
   745,   749,   753,   757,   761,   763,   766,   769,   773,   777,
   784,   791,   793,   798,   803,   807,   811,   813,   815,   817,
   821,   823,   826,   830,   834,   838,   840,   842,   844,   848,
   852,   857,   860,   862,   864,   866,   869,   873,   877,   883,
   889,   891,   895,   897,   901,   905,   909,   911,   913,   915,
   917,   919,   921,   927,   933,   935,   940
};

static const short yyrhs[] = {    76,
     0,    75,     0,    74,    75,     0,    39,     0,   105,     0,
   106,     0,     0,    77,     0,    78,     0,    77,    78,     0,
    79,     0,   123,    79,     0,    80,     0,    86,     0,    94,
     0,    98,     0,   102,     0,   103,     0,   104,     0,    81,
     0,    82,     0,    26,     6,    69,    83,    70,    39,     0,
    26,     6,    69,    83,    70,    40,   122,    39,     0,    26,
     6,    69,    83,    70,   114,     0,    26,     6,    69,    83,
    70,    40,   122,   114,     0,     0,    84,     0,    31,     0,
    34,     0,    35,     0,    85,     0,    84,    71,    85,     0,
     6,    45,   122,     0,    24,     6,    45,   122,     0,     6,
    45,    36,   122,     0,     6,    45,    62,   122,     0,    87,
     0,    91,     0,    28,     6,    43,    88,    44,     0,    28,
     6,    39,     0,     0,    89,     0,    89,    71,     0,    90,
     0,    89,    71,    90,     0,     6,    45,   122,     0,   123,
     6,    45,   122,     0,    28,     6,    69,    92,    70,     0,
     0,    93,     0,    93,    71,     0,   122,     0,   123,   122,
     0,    93,    71,   122,     0,    93,    71,   123,   122,     0,
    27,     6,    43,    95,    44,     0,     0,    71,     0,    96,
     0,    96,    71,     0,    97,     0,    96,    71,    97,     0,
     6,     0,   123,     6,     0,     6,    46,   113,     0,     6,
    46,   109,     0,   123,     6,    46,   113,     0,   123,     6,
    46,   109,     0,   123,     6,    43,    88,    44,     0,     6,
    43,    88,    44,     0,    30,   122,    43,    99,    44,     0,
    30,     6,    16,   122,    43,    99,    44,     0,     0,   100,
     0,   101,     0,   100,   101,     0,    80,     0,   103,     0,
   123,    80,     0,   123,   103,     0,    29,     6,    43,    99,
    44,     0,    25,     6,    45,   122,    46,   113,    39,     0,
    25,     6,    45,   122,    46,   109,    39,     0,    25,     6,
    45,   122,    39,     0,    37,     6,    39,     0,    37,     6,
    43,    76,    44,     0,    23,     6,    46,   113,    39,     0,
    23,     6,    46,   109,    39,     0,    23,     6,    45,   122,
    46,   113,    39,     0,    23,     6,    45,   122,    46,   109,
    39,     0,    23,    24,     6,    39,     0,    23,    24,     6,
    45,   122,    39,     0,    23,    24,     6,    46,   113,    39,
     0,    23,    24,     6,    46,   109,    39,     0,    23,    24,
     6,    45,   122,    46,   113,    39,     0,    23,    24,     6,
    45,   122,    46,   109,    39,     0,   109,    39,     0,   113,
    39,     0,     0,   108,    71,     0,   108,     0,   113,     0,
   109,     0,   108,    71,   113,     0,   108,    71,   109,     0,
    10,     0,     4,     0,     5,     0,     3,     0,     9,     0,
     7,     0,     8,     0,   109,    56,   109,     0,   109,    56,
   113,     0,   113,    56,   109,     0,   113,    56,   113,     0,
   109,    57,   109,     0,   109,    57,   113,     0,   113,    57,
   109,     0,   113,    57,   113,     0,   109,    59,   109,     0,
   109,    59,   113,     0,   113,    59,   109,     0,   113,    59,
   113,     0,   109,    58,   109,     0,   109,    58,   113,     0,
   113,    58,   109,     0,   113,    58,   113,     0,   109,    60,
   109,     0,   109,    60,   113,     0,   113,    60,   109,     0,
   113,    60,   113,     0,   109,    49,   109,     0,   109,    49,
   113,     0,   113,    49,   109,     0,   113,    49,   113,     0,
   109,    48,   109,     0,   109,    48,   113,     0,   113,    48,
   109,     0,   113,    48,   113,     0,   109,    46,   109,     0,
   109,    46,   113,     0,   113,    46,   109,     0,   113,    46,
   113,     0,   109,    52,   109,     0,   109,    52,   113,     0,
   113,    52,   109,     0,   113,    52,   113,     0,   109,    53,
   109,     0,   109,    53,   113,     0,   113,    53,   109,     0,
   113,    53,   113,     0,   109,    51,   109,     0,   109,    51,
   113,     0,   113,    51,   109,     0,   113,    51,   113,     0,
   109,    50,   109,     0,   109,    50,   113,     0,   113,    50,
   109,     0,   113,    50,   113,     0,   109,    55,   109,     0,
   109,    55,   113,     0,   113,    55,   109,     0,   113,    55,
   113,     0,   109,    54,   109,     0,   109,    54,   113,     0,
   113,    54,   109,     0,   113,    54,   113,     0,    57,   109,
     0,    57,   113,     0,    61,   109,     0,    61,   113,     0,
   109,    65,     0,   113,    65,     0,    58,   109,     0,    58,
   113,     0,    62,   109,     0,    62,   113,     0,    36,   113,
     0,    36,   109,     0,    67,   107,    72,     0,    67,   109,
    39,   109,    72,     0,    67,   109,    39,   113,    72,     0,
    67,   113,    39,   109,    72,     0,    67,   113,    39,   113,
    72,     0,   109,    67,   109,    72,     0,   109,    67,   113,
    72,     0,   113,    67,   109,    72,     0,   113,    67,   113,
    72,     0,   109,    66,     3,     0,   113,    66,     3,     0,
    20,     0,    41,     0,    41,   109,     0,    41,   113,     0,
    47,     0,    47,   109,     0,    47,   113,     0,   109,    47,
     0,   113,    47,     0,   109,    47,   109,     0,   109,    47,
   113,     0,   113,    47,   109,     0,   113,    47,   113,     0,
    42,     0,    42,   109,     0,    42,   113,     0,   109,    66,
     6,     0,   113,    66,     6,     0,   109,    66,     6,    69,
   107,    70,     0,   113,    66,     6,    69,   107,    70,     0,
   110,     0,   110,    69,   107,    70,     0,   109,    43,   111,
    44,     0,    69,   113,    70,     0,    69,   109,    70,     0,
     6,     0,    38,     0,    31,     0,   110,    68,     6,     0,
   112,     0,    71,   112,     0,   111,    71,   112,     0,     6,
    45,   109,     0,     6,    45,   113,     0,   114,     0,   115,
     0,   119,     0,    43,    74,    44,     0,    43,   109,    44,
     0,    43,    74,   109,    44,     0,    43,    44,     0,   116,
     0,   117,     0,   118,     0,    17,   114,     0,    18,   113,
   114,     0,    18,   109,   114,     0,    16,     6,    19,   113,
   114,     0,    16,     6,    19,   109,   114,     0,   120,     0,
   120,    22,   114,     0,   121,     0,   120,    22,   121,     0,
    21,   109,   114,     0,    21,   113,   114,     0,    11,     0,
    12,     0,    13,     0,    14,     0,    15,     0,     6,     0,
    67,   122,    39,   113,    72,     0,    67,   122,    39,   109,
    72,     0,    33,     0,    33,    69,    38,    70,     0,    33,
    69,    31,    70,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   141,   147,   148,   151,   152,   153,   156,   157,   160,   161,
   164,   165,   168,   169,   170,   171,   172,   173,   174,   179,
   180,   183,   184,   187,   188,   191,   192,   195,   196,   197,
   198,   199,   202,   203,   204,   205,   210,   211,   214,   215,
   218,   219,   220,   223,   224,   227,   228,   233,   236,   237,
   238,   241,   242,   243,   244,   249,   252,   253,   254,   255,
   258,   259,   262,   263,   264,   265,   266,   267,   268,   269,
   274,   275,   278,   279,   282,   283,   287,   288,   289,   290,
   296,   301,   302,   303,   308,   309,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   326,   327,   333,   334,
   335,   338,   339,   340,   341,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
   369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
   379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
   389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
   399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
   409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
   429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
   439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
   449,   450,   451,   452,   453,   454,   458,   459,   460,   461,
   466,   467,   468,   470,   471,   474,   475,   476,   480,   481,
   482,   483,   486,   487,   488,   491,   494,   495,   498,   499,
   502,   503,   507,   508,   511,   512,   518,   519,   520,   521,
   522,   523,   524,   525,   531,   532,   533
};

static const char * const yytname[] = {   "$","error","$undefined.","INT_LITERAL",
"STRING_LITERAL","RAW_STRING_LITERAL","ID","TRUE","FALSE","FLOAT_LITERAL","CHAR_LITERAL",
"BOOL","CHAR","FLOAT","INT","STRING","FOR","LOOP","WHILE","IN","CONTINUE","IF",
"ELSE","LET","MUT","CONST","FN","ENUM","STRUCT","TRAIT","IMPL","SELF","BIG_SELF",
"PUB","SELF_REF","MUT_SELF_REF","MUT_REF","MOD","SUPER","';'","RIGHT_ARROW",
"BREAK","RETURN","'{'","'}'","':'","'='","RANGE","OR","AND","'<'","'>'","EQUAL",
"NOT_EQUAL","LESS_EQUAL","GREATER_EQUAL","'+'","'-'","'*'","'/'","'%'","'!'",
"'&'","UMINUS","USTAR","'?'","'.'","'['","DOUBLEDOTS","'('","')'","','","']'",
"Program","StmtList","Stmt","ItemListEmpty","ItemList","Item","SimpleItem","FuncStmt",
"DecFuncStmt","ImplFuncStmt","FuncParamListEmpty","FuncParamList","FuncParam",
"StructStmt","StructStruct","StructFieldListEmpty","StructFieldList","StructField",
"TupleStruct","TupleFieldListEmpty","TupleFieldList","EnumStmt","EnumItemListEmpty",
"EnumItemList","EnumItem","ImplStmt","AssociatedItemListEmpty","AssociatedItemList",
"AssociatedItem","TraitStmt","ConstStmt","ModuleStmt","LetStmt","ExprStmt","ExprListEmpty",
"ExprList","ExprWithoutBlock","PathCallExpr","StructExprFieldList","StructExprField",
"ExprWithBlock","BlockExpr","LoopExpr","InfiniteLoopExpr","PredicateLoopExpr",
"IteratorLoopExpr","IfExpr","SimpleIfElseExpr","SimpleIfExpr","Type","Visibility",
""
};
#endif

static const short yyr1[] = {     0,
    73,    74,    74,    75,    75,    75,    76,    76,    77,    77,
    78,    78,    79,    79,    79,    79,    79,    79,    79,    80,
    80,    81,    81,    82,    82,    83,    83,    84,    84,    84,
    84,    84,    85,    85,    85,    85,    86,    86,    87,    87,
    88,    88,    88,    89,    89,    90,    90,    91,    92,    92,
    92,    93,    93,    93,    93,    94,    95,    95,    95,    95,
    96,    96,    97,    97,    97,    97,    97,    97,    97,    97,
    98,    98,    99,    99,   100,   100,   101,   101,   101,   101,
   102,   103,   103,   103,   104,   104,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   106,   106,   107,   107,
   107,   108,   108,   108,   108,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   110,   110,   110,   110,
   111,   111,   111,   112,   112,   113,   113,   113,   114,   114,
   114,   114,   115,   115,   115,   116,   117,   117,   118,   118,
   119,   119,   120,   120,   121,   121,   122,   122,   122,   122,
   122,   122,   122,   122,   123,   123,   123
};

static const short yyr2[] = {     0,
     1,     1,     2,     1,     1,     1,     0,     1,     1,     2,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     6,     8,     6,     8,     0,     1,     1,     1,     1,
     1,     3,     3,     4,     4,     4,     1,     1,     5,     3,
     0,     1,     2,     1,     3,     3,     4,     5,     0,     1,
     2,     1,     2,     3,     4,     5,     0,     1,     1,     2,
     1,     3,     1,     2,     3,     3,     4,     4,     5,     4,
     5,     7,     0,     1,     1,     2,     1,     1,     2,     2,
     5,     7,     7,     5,     3,     5,     5,     5,     7,     7,
     4,     6,     6,     6,     8,     8,     2,     2,     0,     2,
     1,     1,     1,     3,     3,     1,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     3,     5,     5,     5,     5,     4,     4,     4,     4,     3,
     3,     1,     1,     2,     2,     1,     2,     2,     2,     2,
     3,     3,     3,     3,     1,     2,     2,     3,     3,     6,
     6,     1,     4,     4,     3,     3,     1,     1,     1,     3,
     1,     2,     3,     3,     3,     1,     1,     1,     3,     3,
     4,     2,     1,     1,     1,     2,     3,     3,     5,     5,
     1,     3,     1,     3,     3,     3,     1,     1,     1,     1,
     1,     1,     5,     5,     1,     4,     4
};

static const short yydefact[] = {     7,
     0,     0,     0,     0,     0,     0,   255,     0,     1,     8,
     9,    11,    13,    20,    21,    14,    37,    38,    15,    16,
    17,    18,    19,     0,     0,     0,     0,     0,     0,   252,
   247,   248,   249,   250,   251,     0,     0,     0,     0,    10,
    12,     0,    26,    57,    40,    41,    49,    73,     0,   252,
     0,    73,     0,     0,    85,     7,     0,     0,     0,    28,
    29,    30,     0,    27,    31,    63,    58,     0,    59,    61,
     0,     0,     0,    42,    44,     0,     0,    50,    52,     0,
    77,     0,    74,    75,    78,     0,     0,     0,     0,   257,
   256,     0,    84,     0,     0,     0,     0,     0,    41,     0,
    56,    60,    64,     0,    39,    43,     0,    48,    51,    53,
    81,    76,    79,    80,    73,   109,   107,   108,   217,   111,
   112,   110,   106,     0,     0,     0,   192,     0,   219,     0,
   218,   193,   205,     0,   196,     0,     0,     0,     0,    99,
     0,     0,   212,     0,   226,   227,   233,   234,   235,   228,
   241,   243,    71,    86,     0,     0,     0,     0,    33,     0,
    22,     0,    24,    32,     0,    66,    65,    62,    41,     0,
    46,    45,     0,    54,     0,     0,     0,   236,     0,     0,
     0,     0,   180,   179,   194,   195,   206,   207,     0,     4,
   232,     0,     2,     5,     6,     0,     0,   197,   198,   169,
   170,   175,   176,   171,   172,   177,   178,     0,   101,   103,
   102,     0,     0,     0,     0,   199,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   173,
     0,     0,   254,     0,    99,     0,   200,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   174,     0,     0,   253,     0,    83,    82,    35,    36,    34,
     0,    70,     0,    68,    67,    47,    55,    72,     0,     0,
   238,   237,   245,   246,     0,     0,   229,     3,     0,    97,
   230,    98,   181,   100,     0,     0,   216,   215,     0,     0,
     0,   221,   141,   142,   201,   202,   137,   138,   133,   134,
   157,   158,   153,   154,   145,   146,   149,   150,   165,   166,
   161,   162,   113,   114,   117,   118,   125,   126,   121,   122,
   129,   130,   190,   208,     0,     0,   220,     0,   103,   102,
   143,   144,   203,   204,   139,   140,   135,   136,   159,   160,
   155,   156,   147,   148,   151,   152,   167,   168,   163,   164,
   115,   116,   119,   120,   127,   128,   123,   124,   131,   132,
   191,   209,     0,     0,   242,   244,    23,    25,    69,     0,
     0,   217,     0,     0,     0,   231,   105,   104,     0,     0,
     0,     0,     0,   222,   214,     0,    99,   186,   187,   213,
    99,   188,   189,   240,   239,     0,     0,     0,    91,     0,
     0,   182,   183,   184,   185,   224,   225,   223,     0,     0,
     0,    88,    87,     0,     0,     0,   210,   211,     0,     0,
    92,     0,    94,    93,    90,    89,     0,     0,    96,    95,
     0,     0,     0
};

static const short yydefgoto[] = {   431,
   192,   193,     9,    10,    11,    12,    13,    14,    15,    63,
    64,    65,    16,    17,    73,    74,    75,    18,    77,    78,
    19,    68,    69,    70,    20,    82,    83,    84,    21,    22,
    23,   194,   195,   208,   209,   329,   143,   291,   292,   197,
   145,   146,   147,   148,   149,   150,   151,   152,    37,    76
};

static const short yypact[] = {   433,
    10,    16,    22,    37,    44,   134,   -39,    60,-32768,   433,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   505,    26,    25,    66,   -24,    68,    80,
-32768,-32768,-32768,-32768,-32768,   206,    75,   -17,    24,-32768,
-32768,   206,   202,    -2,-32768,     3,   191,    94,   206,-32768,
   111,    94,    84,   109,-32768,   433,    53,   135,   175,-32768,
-32768,-32768,   128,   129,-32768,     5,-32768,   165,   139,-32768,
   205,   169,   178,   152,-32768,   219,   157,   158,-32768,   206,
-32768,   184,    94,-32768,-32768,   110,   192,   621,   190,-32768,
-32768,   197,-32768,   621,    89,   198,    14,    11,     3,   621,
-32768,     4,    19,   206,-32768,     3,   199,-32768,   191,-32768,
-32768,-32768,-32768,-32768,    94,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   243,   207,   621,-32768,   621,-32768,   621,
-32768,   621,   621,   482,   294,   621,   621,   621,   621,   621,
   621,   646,    74,  1163,-32768,-32768,-32768,-32768,-32768,-32768,
   229,-32768,-32768,-32768,   834,   981,   206,   206,-32768,   206,
-32768,   206,-32768,-32768,   208,  1298,  1395,-32768,     3,   621,
-32768,-32768,   206,-32768,   206,   209,   236,-32768,  1323,  1348,
  1323,  1348,    63,    93,  1298,  1395,  1298,  1395,    23,-32768,
-32768,   554,-32768,-32768,-32768,   784,  1003,   212,  1438,    63,
    93,    63,    93,    63,    93,    63,    93,   185,   203,   859,
  1025,  1138,  1370,    18,   621,   294,   621,   621,   621,   621,
   621,   621,   621,   621,   621,   621,   621,   621,   621,-32768,
   138,   621,-32768,   250,   621,   621,   294,   621,   621,   621,
   621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
-32768,   149,   621,-32768,    -1,-32768,-32768,-32768,-32768,-32768,
    54,-32768,   231,  1298,  1395,-32768,-32768,-32768,   621,   410,
-32768,-32768,-32768,-32768,   131,   270,-32768,-32768,   809,-32768,
-32768,-32768,-32768,   621,   621,   621,-32768,-32768,   238,   275,
   -32,-32768,  1417,  1395,   212,  1438,  1457,  1476,  1494,  1512,
   450,   522,   450,   522,   450,   522,   450,   522,   450,   522,
   450,   522,    47,   180,    47,   180,    63,    93,    63,    93,
    63,    93,-32768,   216,   673,  1190,-32768,   218,  1298,  1395,
  1417,  1395,   212,  1438,  1457,  1476,  1494,  1512,   450,   522,
   450,   522,   450,   522,   450,   522,   450,   522,   450,   522,
    47,   180,    47,   180,    63,    93,    63,    93,    63,    93,
-32768,   227,   700,  1217,-32768,-32768,-32768,-32768,-32768,  1323,
  1348,   238,   206,   621,   -13,-32768,  1298,  1395,   727,  1244,
   754,  1271,   621,-32768,-32768,   275,   621,-32768,-32768,-32768,
   621,-32768,-32768,-32768,-32768,   259,   884,  1047,-32768,   206,
   621,-32768,-32768,-32768,-32768,  1298,  1395,-32768,   237,   239,
   621,-32768,-32768,    69,   909,  1069,-32768,-32768,   934,  1091,
-32768,   621,-32768,-32768,-32768,-32768,   959,  1113,-32768,-32768,
   306,   308,-32768
};

static const short yypgoto[] = {-32768,
-32768,   121,   260,-32768,   307,   295,   -45,-32768,-32768,-32768,
-32768,   220,-32768,-32768,   -94,-32768,   215,-32768,-32768,-32768,
-32768,-32768,-32768,   224,-32768,   -27,-32768,   244,-32768,   -25,
-32768,-32768,-32768,  -234,-32768,   -54,-32768,-32768,  -288,   154,
   -48,-32768,-32768,-32768,-32768,-32768,-32768,    73,   -36,     8
};


#define	YYLAST		1579


static const short yytable[] = {    51,
   328,   384,    81,    66,   165,    57,    81,    24,    72,    66,
    79,   385,    87,    53,    45,    25,    58,    24,    46,   128,
    54,    26,    85,   289,    89,   399,    85,    27,   275,    38,
     7,   400,   401,   142,    59,     7,     7,    81,   386,   155,
   113,   134,    28,   110,    47,   166,   276,    99,   163,    29,
   100,    71,   161,   162,    80,    86,   134,    85,   159,    86,
   114,   169,    55,    24,   170,    39,    56,   171,    67,    81,
    42,   179,   174,   181,   263,   183,   178,   185,   187,   196,
   198,   200,   202,   204,   206,   210,   212,   176,   290,    85,
    86,    93,   367,    43,    50,    49,   134,   408,    94,    31,
    32,    33,    34,    35,   227,   228,   229,   421,    44,    71,
    48,   230,   231,   232,   422,   264,   175,    52,     1,     2,
   258,   259,    86,   260,   157,   261,     7,   230,   231,   232,
   271,   272,   273,   274,     1,     2,   266,   279,   267,    30,
   323,   234,   235,   324,    31,    32,    33,    34,    35,    88,
   158,   361,   409,    90,   362,    36,   410,   251,   252,   253,
   293,   295,   297,   299,   301,   303,   305,   307,   309,   311,
   313,   315,   317,   319,   321,   373,   374,   325,    91,    95,
    96,   331,   333,   335,   337,   339,   341,   343,   345,   347,
   349,   351,   353,   355,   357,   359,    50,    97,   363,    98,
    36,    31,    32,    33,    34,    35,   365,    58,   101,   102,
   103,    50,   368,   104,   370,   196,    31,    32,    33,    34,
    35,   105,   106,     7,   107,    59,   108,   111,   109,   377,
   379,   381,    60,   153,   115,    61,    62,   248,   249,   250,
   154,   144,   160,   173,   251,   252,   253,   156,   177,   134,
   255,   262,   268,   167,   269,   327,   283,    36,-32768,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,    36,   284,   369,   375,   230,   231,   232,   180,
   289,   182,   383,   184,   387,   186,   188,   390,   199,   201,
   203,   205,   207,   211,   213,   391,   116,   117,   118,   119,
   120,   121,   122,   123,   411,   432,   417,   433,   418,   124,
   125,   126,   278,   127,   128,    92,    40,   164,    41,   397,
   172,   394,   395,   265,   129,   168,   112,   366,   406,   130,
     0,   131,     0,     0,   132,   133,   396,     0,     0,     0,
-32768,     0,     0,     0,     0,     0,   415,     0,     0,     0,
   136,   137,     0,     0,   138,   139,   419,     0,     0,     0,
   140,     0,   141,   414,     0,     0,     0,   427,   294,   296,
   298,   300,   302,   304,   306,   308,   310,   312,   314,   316,
   318,   320,   322,     0,     0,   326,     0,     0,   330,   332,
   334,   336,   338,   340,   342,   344,   346,   348,   350,   352,
   354,   356,   358,   360,     0,     0,   364,     0,     0,     0,
     0,     0,   116,   117,   118,   372,   120,   121,   122,   123,
     0,     0,   371,     0,     0,   124,   125,   126,     0,   127,
   128,     0,   189,     0,     0,     0,     0,   378,   380,   382,
   129,     0,     0,     0,     0,   130,     0,   131,   190,     0,
   132,   133,   134,   191,     0,     0,   135,     1,     2,     3,
     4,     5,     6,     0,     0,     7,   136,   137,     0,     8,
   138,   139,     0,     0,     0,     0,   140,     0,   141,     0,
   290,     0,     0,     0,   116,   117,   118,   119,   120,   121,
   122,   123,     0,     0,     0,     0,     0,   124,   125,   126,
     0,   127,   128,     0,   189,   225,   226,   227,   228,   229,
     0,     0,   129,     0,   230,   231,   232,   130,     0,   131,
   190,     0,   132,   133,   134,   191,     0,   398,   135,     1,
     2,     3,     4,     5,     6,     0,   407,     0,   136,   137,
   330,     8,   138,   139,   330,     0,     0,     0,   140,     0,
   141,     0,     0,     0,   416,     0,   116,   117,   118,   119,
   120,   121,   122,   123,   420,     0,     0,     0,     0,   124,
   125,   126,     0,   127,   128,   428,   189,   246,   247,   248,
   249,   250,     0,     0,   129,     0,   251,   252,   253,   130,
     0,   131,   190,     0,   132,   133,   134,   277,     0,     0,
   135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   136,   137,     0,     0,   138,   139,     0,     0,     0,     0,
   140,     0,   141,   116,   117,   118,   119,   120,   121,   122,
   123,     0,     0,     0,     0,     0,   124,   125,   126,     0,
   127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   129,     0,     0,     0,     0,   130,     0,   131,     0,
     0,   132,   133,   134,     0,     0,     0,   135,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   136,   137,     0,
     0,   138,   139,     0,     0,     0,     0,   140,   214,   141,
     0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,     0,     0,     0,     0,
   230,   231,   232,     0,     0,   214,     0,   233,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,     0,     0,     0,   230,   231,   232,
     0,     0,   214,     0,   388,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     0,     0,     0,     0,   230,   231,   232,     0,     0,   214,
     0,   392,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,     0,     0,     0,
     0,   230,   231,   232,     0,     0,   214,     0,   402,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,     0,     0,     0,     0,   230,   231,
   232,     0,   280,     0,     0,   404,   214,   281,     0,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,     0,     0,     0,   280,   230,   231,
   232,   214,   376,     0,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,   256,   230,   231,   232,   214,     0,     0,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,     0,     0,     0,   285,   230,   231,
   232,   214,     0,     0,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,   412,   230,   231,   232,   214,     0,     0,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,     0,     0,     0,   423,   230,   231,
   232,   214,     0,     0,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,   425,   230,   231,   232,   214,     0,     0,   215,
   216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,     0,     0,     0,   429,   230,   231,
   232,   214,     0,     0,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   257,
     0,     0,     0,   230,   231,   232,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   282,     0,     0,     0,   251,   252,   253,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   286,     0,     0,     0,   251,   252,   253,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   413,     0,     0,     0,   251,
   252,   253,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   424,     0,     0,
     0,   251,   252,   253,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   426,
     0,     0,     0,   251,   252,   253,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   430,     0,     0,     0,   251,   252,   253,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,     0,     0,     0,     0,   251,   252,   253,
   214,     0,     0,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,     0,     0,
     0,     0,   230,   231,   232,     0,     0,   287,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,     0,     0,     0,     0,   251,   252,   253,
     0,     0,     0,     0,   254,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     0,     0,     0,     0,   251,   252,   253,     0,     0,     0,
     0,   389,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,     0,     0,     0,
     0,   251,   252,   253,     0,     0,     0,     0,   393,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,     0,     0,     0,     0,   251,   252,
   253,     0,     0,     0,     0,   403,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,     0,     0,     0,     0,   251,   252,   253,     0,     0,
   214,     0,   405,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,     0,     0,
     0,     0,   230,   231,   232,   270,     0,     0,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,     0,     0,     0,   230,   231,   232,
   134,     0,     0,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,     0,     0,
     0,     0,   251,   252,   253,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     0,     0,     0,     0,   251,   252,   253,     0,     0,   288,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,     0,     0,     0,     0,   251,
   252,   253,   215,   216,   217,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,     0,     0,     0,
     0,   230,   231,   232,-32768,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   249,   250,     0,     0,
     0,     0,   251,   252,   253,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,     0,     0,     0,
     0,   230,   231,   232,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,     0,     0,     0,     0,
   251,   252,   253,   219,   220,   221,   222,   223,   224,   225,
   226,   227,   228,   229,     0,     0,     0,     0,   230,   231,
   232,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,     0,     0,     0,     0,   251,   252,   253
};

static const short yycheck[] = {    36,
   235,   290,    48,     6,    99,    42,    52,     0,     6,     6,
    47,    44,    49,    31,    39,     6,     6,    10,    43,    21,
    38,     6,    48,     6,    52,    39,    52,     6,     6,    69,
    33,    45,    46,    88,    24,    33,    33,    83,    71,    94,
    86,    43,     6,    80,    69,   100,    24,    43,    97,     6,
    46,    44,    39,    40,    47,    48,    43,    83,    95,    52,
    86,    43,    39,    56,    46,     6,    43,   104,    71,   115,
    45,   126,   109,   128,   169,   130,   125,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   115,    71,   115,
    83,    39,    39,    69,     6,    16,    43,   386,    46,    11,
    12,    13,    14,    15,    58,    59,    60,    39,    43,   102,
    43,    65,    66,    67,    46,   170,   109,    43,    25,    26,
   157,   158,   115,   160,    36,   162,    33,    65,    66,    67,
   179,   180,   181,   182,    25,    26,   173,   192,   175,     6,
     3,    68,    69,     6,    11,    12,    13,    14,    15,    39,
    62,     3,   387,    70,     6,    67,   391,    65,    66,    67,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,    45,    46,   232,    70,    45,
     6,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,     6,    70,   253,    71,
    67,    11,    12,    13,    14,    15,   255,     6,    44,    71,
     6,     6,   261,    45,   269,   270,    11,    12,    13,    14,
    15,    44,    71,    33,     6,    24,    70,    44,    71,   284,
   285,   286,    31,    44,    43,    34,    35,    58,    59,    60,
    44,    88,    45,    45,    65,    66,    67,    94,     6,    43,
    22,    44,    44,   100,    19,     6,    72,    67,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    67,    71,    44,     6,    65,    66,    67,   126,
     6,   128,    45,   130,    69,   132,   133,    70,   135,   136,
   137,   138,   139,   140,   141,    69,     3,     4,     5,     6,
     7,     8,     9,    10,    46,     0,    70,     0,    70,    16,
    17,    18,   192,    20,    21,    56,    10,    98,    24,   374,
   106,   370,   371,   170,    31,   102,    83,   255,   383,    36,
    -1,    38,    -1,    -1,    41,    42,   373,    -1,    -1,    -1,
    47,    -1,    -1,    -1,    -1,    -1,   401,    -1,    -1,    -1,
    57,    58,    -1,    -1,    61,    62,   411,    -1,    -1,    -1,
    67,    -1,    69,   400,    -1,    -1,    -1,   422,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,    -1,    -1,   232,    -1,    -1,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,    -1,    -1,   253,    -1,    -1,    -1,
    -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
    -1,    -1,   269,    -1,    -1,    16,    17,    18,    -1,    20,
    21,    -1,    23,    -1,    -1,    -1,    -1,   284,   285,   286,
    31,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
    41,    42,    43,    44,    -1,    -1,    47,    25,    26,    27,
    28,    29,    30,    -1,    -1,    33,    57,    58,    -1,    37,
    61,    62,    -1,    -1,    -1,    -1,    67,    -1,    69,    -1,
    71,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,
    -1,    20,    21,    -1,    23,    56,    57,    58,    59,    60,
    -1,    -1,    31,    -1,    65,    66,    67,    36,    -1,    38,
    39,    -1,    41,    42,    43,    44,    -1,   374,    47,    25,
    26,    27,    28,    29,    30,    -1,   383,    -1,    57,    58,
   387,    37,    61,    62,   391,    -1,    -1,    -1,    67,    -1,
    69,    -1,    -1,    -1,   401,    -1,     3,     4,     5,     6,
     7,     8,     9,    10,   411,    -1,    -1,    -1,    -1,    16,
    17,    18,    -1,    20,    21,   422,    23,    56,    57,    58,
    59,    60,    -1,    -1,    31,    -1,    65,    66,    67,    36,
    -1,    38,    39,    -1,    41,    42,    43,    44,    -1,    -1,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    57,    58,    -1,    -1,    61,    62,    -1,    -1,    -1,    -1,
    67,    -1,    69,     3,     4,     5,     6,     7,     8,     9,
    10,    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,
    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,    38,    -1,
    -1,    41,    42,    43,    -1,    -1,    -1,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,    -1,
    -1,    61,    62,    -1,    -1,    -1,    -1,    67,    43,    69,
    -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    66,    67,    -1,    -1,    43,    -1,    72,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,    67,
    -1,    -1,    43,    -1,    72,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    43,
    -1,    72,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,    43,    -1,    72,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,
    67,    -1,    39,    -1,    -1,    72,    43,    44,    -1,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    39,    65,    66,
    67,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    39,    65,    66,    67,    43,    -1,    -1,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    39,    65,    66,
    67,    43,    -1,    -1,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    39,    65,    66,    67,    43,    -1,    -1,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    39,    65,    66,
    67,    43,    -1,    -1,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    39,    65,    66,    67,    43,    -1,    -1,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    39,    65,    66,
    67,    43,    -1,    -1,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    39,
    -1,    -1,    -1,    65,    66,    67,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    39,    -1,    -1,    -1,    65,    66,    67,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    39,    -1,    -1,    -1,    65,    66,    67,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    39,    -1,    -1,    -1,    65,
    66,    67,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    39,    -1,    -1,
    -1,    65,    66,    67,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    39,
    -1,    -1,    -1,    65,    66,    67,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    39,    -1,    -1,    -1,    65,    66,    67,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,    67,
    43,    -1,    -1,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    66,    67,    -1,    -1,    70,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    -1,    72,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    -1,    72,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    72,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    -1,    72,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,
    43,    -1,    72,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    66,    67,    43,    -1,    -1,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,    67,
    43,    -1,    -1,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    66,    67,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    70,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,
    66,    67,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    65,    66,    67,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    66,    67,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    65,    66,    67,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    66,    67,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    66,
    67,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    65,    66,    67
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 141 "parser.y"
{ yyval.prg = global_program = new ProgramNode(yyvsp[0].item_list); ;
    break;}
case 2:
#line 147 "parser.y"
{ yyval.stmt_list = new StmtListNode(yyvsp[0].stmt); ;
    break;}
case 3:
#line 148 "parser.y"
{ yyval.stmt_list = StmtListNode::Append(yyvsp[-1].stmt_list, yyvsp[0].stmt); ;
    break;}
case 4:
#line 151 "parser.y"
{ yyval.stmt = new StmtNode(StmtNode::semicolon, 0, 0, 0); ;
    break;}
case 5:
#line 152 "parser.y"
{ yyval.stmt = new StmtNode(StmtNode::let, NULL, NULL, yyvsp[0].let_stmt); ;
    break;}
case 6:
#line 153 "parser.y"
{ yyval.stmt = yyvsp[0].stmt;;
    break;}
case 7:
#line 156 "parser.y"
{ yyval.item_list = 0; ;
    break;}
case 8:
#line 157 "parser.y"
{ yyval.item_list = new ItemListNode(yyvsp[0].item_list); ;
    break;}
case 9:
#line 160 "parser.y"
{ yyval.item_list = new ItemListNode(yyvsp[0].item); ;
    break;}
case 10:
#line 161 "parser.y"
{ yyval.item_list = ItemListNode::Append(yyvsp[-1].item_list, yyvsp[0].item); ;
    break;}
case 11:
#line 164 "parser.y"
{ yyval.item = yyvsp[0].item;;
    break;}
case 12:
#line 165 "parser.y"
{ yyval.item = ItemNode::AddVisibility(yyvsp[-1].vis, yyvsp[0].item);;
    break;}
case 13:
#line 168 "parser.y"
{ yyval.item = ItemNode::DeclarationFunction(self, yyvsp[0].function_stmt); ;
    break;}
case 14:
#line 169 "parser.y"
{ yyval.item = ItemNode::DeclarationStruct(self, yyvsp[0].struct_); ;
    break;}
case 15:
#line 170 "parser.y"
{ yyval.item = ItemNode::DeclarationEnum(self, yyvsp[0].enum_stmt); ;
    break;}
case 16:
#line 171 "parser.y"
{ yyval.item = ItemNode::DeclarationImpl(self, yyvsp[0].impl_stmt); ;
    break;}
case 17:
#line 172 "parser.y"
{ yyval.item = ItemNode::DeclarationTrait(self, yyvsp[0].trait); ;
    break;}
case 18:
#line 173 "parser.y"
{ yyval.item = ItemNode::DeclarationConst(self, yyvsp[0].const_stmt); ;
    break;}
case 19:
#line 174 "parser.y"
{ yyval.item = ItemNode::DeclarationModule(self, yyvsp[0].mod_stmt); ;
    break;}
case 20:
#line 179 "parser.y"
{ yyval.function_stmt = yyvsp[0].function_stmt; ;
    break;}
case 21:
#line 180 "parser.y"
{ yyval.function_stmt = yyvsp[0].function_stmt; ;
    break;}
case 22:
#line 183 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-4].identifier, 0, yyvsp[-2].function_params, 0); ;
    break;}
case 23:
#line 184 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-6].identifier, yyvsp[-1].type, yyvsp[-4].function_params, 0); ;
    break;}
case 24:
#line 187 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-4].identifier, 0, yyvsp[-2].function_params, yyvsp[0].expr); ;
    break;}
case 25:
#line 188 "parser.y"
{ yyval.function_stmt = new FuncStmtNode(yyvsp[-6].identifier, yyvsp[-1].type, yyvsp[-4].function_params, yyvsp[0].expr); ;
    break;}
case 26:
#line 191 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::static_, 0); ;
    break;}
case 27:
#line 192 "parser.y"
{ yyval.function_params = yyvsp[0].function_params; ;
    break;}
case 28:
#line 195 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::self, 0); ;
    break;}
case 29:
#line 196 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::self_ref, 0); ;
    break;}
case 30:
#line 197 "parser.y"
{ yyval.function_params = FuncParamListNode::FunctionParamsFinal(FuncParamListNode::mut_self_ref, 0); ;
    break;}
case 31:
#line 198 "parser.y"
{ yyval.function_params = new FuncParamListNode(FuncParamListNode::static_, yyvsp[0].function_param); ;
    break;}
case 32:
#line 199 "parser.y"
{ yyval.function_params = FuncParamListNode::Append(yyvsp[-2].function_params, yyvsp[0].function_param); ;
    break;}
case 33:
#line 202 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-2].identifier, yyvsp[0].type, FuncParamNode::noMut); ;
    break;}
case 34:
#line 203 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-2].identifier, yyvsp[0].type, FuncParamNode::mut); ;
    break;}
case 35:
#line 204 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-3].identifier, yyvsp[0].type, FuncParamNode::mut_ref); ;
    break;}
case 36:
#line 205 "parser.y"
{ yyval.function_param = new FuncParamNode(yyvsp[-3].identifier, yyvsp[0].type, FuncParamNode::link); ;
    break;}
case 37:
#line 210 "parser.y"
{ yyval.struct_ = yyvsp[0].struct_; ;
    break;}
case 38:
#line 211 "parser.y"
{ yyval.struct_ = yyvsp[0].struct_; ;
    break;}
case 39:
#line 214 "parser.y"
{ yyval.struct_ = new StructStructNode(yyvsp[-3].identifier, yyvsp[-1].struct_items); ;
    break;}
case 40:
#line 215 "parser.y"
{ yyval.struct_ = new StructStructNode(yyvsp[-1].identifier, 0); ;
    break;}
case 41:
#line 218 "parser.y"
{ yyval.struct_items = 0; ;
    break;}
case 42:
#line 219 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[0].struct_items); ;
    break;}
case 43:
#line 220 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[-1].struct_items); ;
    break;}
case 44:
#line 223 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[0].struct_item); ;
    break;}
case 45:
#line 224 "parser.y"
{ yyval.struct_items = StructFieldListNode::Append(yyvsp[-2].struct_items, yyvsp[0].struct_item); ;
    break;}
case 46:
#line 227 "parser.y"
{ yyval.struct_item = new StructFieldNode(yyvsp[-2].identifier, yyvsp[0].type, self); ;
    break;}
case 47:
#line 228 "parser.y"
{ yyval.struct_item = new StructFieldNode(yyvsp[-2].identifier, yyvsp[0].type, yyvsp[-3].vis); ;
    break;}
case 48:
#line 233 "parser.y"
{ yyval.struct_ = new StructStructNode(yyvsp[-3].identifier, yyvsp[-1].struct_items); ;
    break;}
case 49:
#line 236 "parser.y"
{ yyval.struct_items = 0; ;
    break;}
case 50:
#line 237 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[0].struct_items); ;
    break;}
case 51:
#line 238 "parser.y"
{ yyval.struct_items = new StructFieldListNode(yyvsp[-1].struct_items); ;
    break;}
case 52:
#line 241 "parser.y"
{ yyval.struct_items = new StructFieldListNode(new StructFieldNode(0, yyvsp[0].type, self)); ;
    break;}
case 53:
#line 242 "parser.y"
{ yyval.struct_items = new StructFieldListNode(new StructFieldNode(0, yyvsp[0].type, yyvsp[-1].vis)); ;
    break;}
case 54:
#line 243 "parser.y"
{ yyval.struct_items = StructFieldListNode::Append(yyvsp[-2].struct_items, new StructFieldNode(0, yyvsp[0].type, self)); ;
    break;}
case 55:
#line 244 "parser.y"
{ yyval.struct_items = StructFieldListNode::Append(yyvsp[-3].struct_items, new StructFieldNode(0, yyvsp[0].type, yyvsp[-1].vis)); ;
    break;}
case 56:
#line 249 "parser.y"
{ yyval.enum_stmt = new EnumStmtNode(yyvsp[-3].identifier, yyvsp[-1].enum_items); ;
    break;}
case 57:
#line 252 "parser.y"
{ yyval.enum_items = 0; ;
    break;}
case 58:
#line 253 "parser.y"
{ yyval.enum_items = 0; ;
    break;}
case 59:
#line 254 "parser.y"
{ yyval.enum_items = new EnumItemListNode(yyvsp[0].enum_items); ;
    break;}
case 60:
#line 255 "parser.y"
{ yyval.enum_items = new EnumItemListNode(yyvsp[-1].enum_items); ;
    break;}
case 61:
#line 258 "parser.y"
{ yyval.enum_items = new EnumItemListNode(yyvsp[0].enum_item); ;
    break;}
case 62:
#line 259 "parser.y"
{ yyval.enum_items = EnumItemListNode::Append(yyvsp[-2].enum_items, yyvsp[0].enum_item); ;
    break;}
case 63:
#line 262 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[0].identifier, self, 0, 0); ;
    break;}
case 64:
#line 263 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[0].identifier, yyvsp[-1].vis, 0, 0); ;
    break;}
case 65:
#line 264 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, self, NULL, yyvsp[0].expr); ;
    break;}
case 66:
#line 265 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, self, 0, yyvsp[0].expr); ;
    break;}
case 67:
#line 266 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, yyvsp[-3].vis, 0, yyvsp[0].expr); ;
    break;}
case 68:
#line 267 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-2].identifier, yyvsp[-3].vis, 0, yyvsp[0].expr); ;
    break;}
case 69:
#line 268 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-3].identifier, yyvsp[-4].vis, yyvsp[-1].struct_items, 0); ;
    break;}
case 70:
#line 269 "parser.y"
{ yyval.enum_item = new EnumItemNode(yyvsp[-3].identifier, self, yyvsp[-1].struct_items, 0); ;
    break;}
case 71:
#line 274 "parser.y"
{ yyval.impl_stmt = new ImplStmtNode(ImplStmtNode::inherent, yyvsp[-3].type, 0, yyvsp[-1].associated_items); ;
    break;}
case 72:
#line 275 "parser.y"
{ yyval.impl_stmt = new ImplStmtNode(ImplStmtNode::trait, yyvsp[-3].type, yyvsp[-5].identifier, yyvsp[-1].associated_items); ;
    break;}
case 73:
#line 278 "parser.y"
{ yyval.associated_items = 0; ;
    break;}
case 74:
#line 279 "parser.y"
{ yyval.associated_items = new AssociatedItemListNode(yyvsp[0].associated_items); ;
    break;}
case 75:
#line 282 "parser.y"
{ yyval.associated_items = new AssociatedItemListNode(yyvsp[0].associated_item); ;
    break;}
case 76:
#line 283 "parser.y"
{ yyval.associated_items = AssociatedItemListNode::Append(yyvsp[-1].associated_items, yyvsp[0].associated_item); ;
    break;}
case 77:
#line 287 "parser.y"
{ yyval.associated_item = new AssociatedItemNode(self, yyvsp[0].function_stmt, 0); ;
    break;}
case 78:
#line 288 "parser.y"
{ yyval.associated_item = new AssociatedItemNode(self, 0, yyvsp[0].const_stmt); ;
    break;}
case 79:
#line 289 "parser.y"
{ yyval.associated_item = new AssociatedItemNode(yyvsp[-1].vis, yyvsp[0].function_stmt, 0); ;
    break;}
case 80:
#line 290 "parser.y"
{ yyval.associated_item = new AssociatedItemNode(yyvsp[-1].vis, 0, yyvsp[0].const_stmt); ;
    break;}
case 81:
#line 296 "parser.y"
{ yyval.trait = new TraitNode(yyvsp[-3].identifier, yyvsp[-1].associated_items); ;
    break;}
case 82:
#line 301 "parser.y"
{ yyval.const_stmt = ConstStmtNode::ConstStmt(yyvsp[-5].identifier, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 83:
#line 302 "parser.y"
{ yyval.const_stmt = ConstStmtNode::ConstStmt(yyvsp[-5].identifier, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 84:
#line 303 "parser.y"
{ yyval.const_stmt = ConstStmtNode::ConstStmt(yyvsp[-3].identifier, yyvsp[-1].type, 0); ;
    break;}
case 85:
#line 308 "parser.y"
{ yyval.mod_stmt = new ModuleStmtNode(ModuleStmtNode::empty, yyvsp[-1].identifier, 0); ;
    break;}
case 86:
#line 309 "parser.y"
{ yyval.mod_stmt = new ModuleStmtNode(ModuleStmtNode::empty, yyvsp[-3].identifier, yyvsp[-1].item_list); ;
    break;}
case 87:
#line 313 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 88:
#line 314 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 89:
#line 315 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 90:
#line 316 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::noMut, yyvsp[-1].expr); ;
    break;}
case 91:
#line 317 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-1].identifier, 0, LetStmtNode::mut, 0); ;
    break;}
case 92:
#line 318 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, yyvsp[-1].type, LetStmtNode::mut, 0); ;
    break;}
case 93:
#line 319 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 94:
#line 320 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-3].identifier, 0, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 95:
#line 321 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 96:
#line 322 "parser.y"
{ yyval.let_stmt = new LetStmtNode(yyvsp[-5].identifier, yyvsp[-3].type, LetStmtNode::mut, yyvsp[-1].expr); ;
    break;}
case 97:
#line 326 "parser.y"
{yyval.stmt = new StmtNode(StmtNode::exprstmt, yyvsp[-1].expr, 0, 0);;
    break;}
case 98:
#line 327 "parser.y"
{yyval.stmt = new StmtNode(StmtNode::exprstmt, yyvsp[-1].expr, 0, 0);;
    break;}
case 99:
#line 333 "parser.y"
{ yyval.expr_list = 0; ;
    break;}
case 100:
#line 334 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[-1].expr_list); ;
    break;}
case 101:
#line 335 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr_list); ;
    break;}
case 102:
#line 338 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 103:
#line 339 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 104:
#line 340 "parser.y"
{ yyval.expr_list = ExprListNode::Append(yyvsp[-2].expr_list, yyvsp[0].expr); ;
    break;}
case 105:
#line 341 "parser.y"
{ yyval.expr_list = ExprListNode::Append(yyvsp[-2].expr_list, yyvsp[0].expr); ;
    break;}
case 106:
#line 344 "parser.y"
{ yyval.expr = ExprNode::ExprFromCharLiteral(ExprNode::char_lit, yyvsp[0].char_literal); ;
    break;}
case 107:
#line 345 "parser.y"
{ yyval.expr = ExprNode::ExprFromStringLiteral(ExprNode::string_lit, yyvsp[0].string_literal);  ;
    break;}
case 108:
#line 346 "parser.y"
{ yyval.expr = ExprNode::ExprFromStringLiteral(ExprNode::raw_string_lit, yyvsp[0].string_literal); ;
    break;}
case 109:
#line 347 "parser.y"
{ yyval.expr = ExprNode::ExprFromIntLiteral(ExprNode::int_lit, yyvsp[0].int_literal); ;
    break;}
case 110:
#line 348 "parser.y"
{ yyval.expr = ExprNode::ExprFromFloatLiteral(ExprNode::float_lit, yyvsp[0].float_literal); ;
    break;}
case 111:
#line 349 "parser.y"
{ yyval.expr = ExprNode::ExprFromBoolLiteral(ExprNode::bool_lit, yyvsp[0].bool_literal); ;
    break;}
case 112:
#line 350 "parser.y"
{ yyval.expr = ExprNode::ExprFromBoolLiteral(ExprNode::bool_lit, yyvsp[0].bool_literal); ;
    break;}
case 113:
#line 351 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 114:
#line 352 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 115:
#line 353 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 116:
#line 354 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::plus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 117:
#line 355 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 118:
#line 356 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 119:
#line 357 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 120:
#line 358 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::minus, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 121:
#line 359 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 122:
#line 360 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 123:
#line 361 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 124:
#line 362 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::div_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 125:
#line 363 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 126:
#line 364 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 127:
#line 365 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 128:
#line 366 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mul_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 129:
#line 367 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 130:
#line 368 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 131:
#line 369 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 132:
#line 370 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mod, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 133:
#line 371 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 134:
#line 372 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 135:
#line 373 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 136:
#line 374 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::and_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 137:
#line 375 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 138:
#line 376 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 139:
#line 377 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 140:
#line 378 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::or_, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 141:
#line 379 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 142:
#line 380 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 143:
#line 381 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 144:
#line 382 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::asign, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 145:
#line 383 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 146:
#line 384 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 147:
#line 385 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 148:
#line 386 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 149:
#line 387 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 150:
#line 388 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 151:
#line 389 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 152:
#line 390 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::not_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 153:
#line 391 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 154:
#line 392 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 155:
#line 393 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 156:
#line 394 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 157:
#line 395 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 158:
#line 396 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 159:
#line 397 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 160:
#line 398 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 161:
#line 399 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 162:
#line 400 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 163:
#line 401 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 164:
#line 402 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::greater_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 165:
#line 403 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 166:
#line 404 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 167:
#line 405 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 168:
#line 406 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::less_equal, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 169:
#line 407 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::uminus, yyvsp[0].expr, 0); ;
    break;}
case 170:
#line 408 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::uminus, yyvsp[0].expr, 0); ;
    break;}
case 171:
#line 409 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::negotation, yyvsp[0].expr, 0); ;
    break;}
case 172:
#line 410 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::negotation, yyvsp[0].expr, 0); ;
    break;}
case 173:
#line 411 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::question, yyvsp[-1].expr, 0); ;
    break;}
case 174:
#line 412 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::question, yyvsp[-1].expr, 0); ;
    break;}
case 175:
#line 413 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::ustar, yyvsp[0].expr, 0); ;
    break;}
case 176:
#line 414 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::ustar, yyvsp[0].expr, 0); ;
    break;}
case 177:
#line 415 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::link, yyvsp[0].expr, 0); ;
    break;}
case 178:
#line 416 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::link, yyvsp[0].expr, 0); ;
    break;}
case 179:
#line 417 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mut_link, yyvsp[0].expr, 0); ;
    break;}
case 180:
#line 418 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::mut_link, yyvsp[0].expr, 0); ;
    break;}
case 181:
#line 419 "parser.y"
{ yyval.expr = ExprNode::ArrExprFromList(ExprNode::array_expr, yyvsp[-1].expr_list); ;
    break;}
case 182:
#line 420 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 183:
#line 421 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 184:
#line 422 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 185:
#line 423 "parser.y"
{ yyval.expr = ExprNode::ArrExprAutoFill(ExprNode::array_expr_auto_fill, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 186:
#line 424 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 187:
#line 425 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 188:
#line 426 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 189:
#line 427 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::index_expr, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 190:
#line 428 "parser.y"
{ yyval.expr = ExprNode::TupleExpr(ExprNode::tuple_expr, yyvsp[-2].expr, yyvsp[0].int_literal); ;
    break;}
case 191:
#line 429 "parser.y"
{ yyval.expr = ExprNode::TupleExpr(ExprNode::tuple_expr, yyvsp[-2].expr, yyvsp[0].int_literal); ;
    break;}
case 192:
#line 430 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::continue_expr, 0, 0); ;
    break;}
case 193:
#line 431 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::break_expr, 0, 0); ;
    break;}
case 194:
#line 432 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::break_with_val_expr, yyvsp[0].expr, 0); ;
    break;}
case 195:
#line 433 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::break_with_val_expr, yyvsp[0].expr, 0); ;
    break;}
case 196:
#line 434 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_right, 0, 0); ;
    break;}
case 197:
#line 435 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_right, yyvsp[0].expr, 0); ;
    break;}
case 198:
#line 436 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_right, yyvsp[0].expr, 0); ;
    break;}
case 199:
#line 437 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_left, yyvsp[-1].expr, 0); ;
    break;}
case 200:
#line 438 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_left, yyvsp[-1].expr, 0); ;
    break;}
case 201:
#line 439 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 202:
#line 440 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 203:
#line 441 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 204:
#line 442 "parser.y"
{ yyval.expr = ExprNode::RangeExpr(ExprNode::range_expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 205:
#line 443 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::return_expr, 0, 0); ;
    break;}
case 206:
#line 444 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::return_expr, yyvsp[0].expr, 0); ;
    break;}
case 207:
#line 445 "parser.y"
{ yyval.expr = ExprNode::OperatorExpr(ExprNode::return_expr, yyvsp[0].expr, 0); ;
    break;}
case 208:
#line 446 "parser.y"
{ yyval.expr = ExprNode::CallAccessExpr(ExprNode::field_access_expr, yyvsp[0].identifier, yyvsp[-2].expr, 0); ;
    break;}
case 209:
#line 447 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::field_access_expr, yyvsp[0].identifier, yyvsp[-2].expr, 0); ;
    break;}
case 210:
#line 448 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::method_expr, yyvsp[-3].identifier, yyvsp[-5].expr, yyvsp[-1].expr_list); ;
    break;}
case 211:
#line 449 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::method_expr, yyvsp[-3].identifier, yyvsp[-5].expr, yyvsp[-1].expr_list); ;
    break;}
case 212:
#line 450 "parser.y"
{ yyval.expr = yyvsp[0].expr ;
    break;}
case 213:
#line 451 "parser.y"
{ yyval.expr = ExprNode::StaticMethod(ExprNode::static_method, yyvsp[-3].expr, yyvsp[-1].expr_list); ;
    break;}
case 214:
#line 452 "parser.y"
{ yyval.expr = ExprNode::FieldListAccess(ExprNode::struct_creation, yyvsp[-3].expr, yyvsp[-1].expr_list); ;
    break;}
case 215:
#line 453 "parser.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 216:
#line 454 "parser.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 217:
#line 458 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::id_, yyvsp[0].identifier, 0, 0); ;
    break;}
case 218:
#line 459 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::super_expr, new string("super"), 0, 0); ;
    break;}
case 219:
#line 460 "parser.y"
{ yyval.expr =  ExprNode::CallAccessExpr(ExprNode::self_expr, new string("self"), 0, 0); ;
    break;}
case 220:
#line 461 "parser.y"
{ yyval.expr = ExprNode::PathCallExpr(ExprNode::path_call_expr, yyvsp[0].identifier, yyvsp[-2].expr); ;
    break;}
case 221:
#line 466 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 222:
#line 467 "parser.y"
{ yyval.expr_list = new ExprListNode(yyvsp[0].expr); ;
    break;}
case 223:
#line 468 "parser.y"
{ yyval.expr_list = ExprListNode::Append(yyvsp[-2].expr_list, yyvsp[0].expr); ;
    break;}
case 224:
#line 470 "parser.y"
{ yyval.expr = ExprNode::ExprFromStructField(ExprNode::struct_field_expr, yyvsp[-2].identifier, yyvsp[0].expr); ;
    break;}
case 225:
#line 471 "parser.y"
{ yyval.expr = ExprNode::ExprFromStructField(ExprNode::struct_field_expr, yyvsp[-2].identifier, yyvsp[0].expr); ;
    break;}
case 226:
#line 474 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 227:
#line 475 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 228:
#line 476 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 229:
#line 480 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, 0, yyvsp[-1].stmt_list); ;
    break;}
case 230:
#line 481 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, yyvsp[-1].expr, 0); ;
    break;}
case 231:
#line 482 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, yyvsp[-1].expr, yyvsp[-2].stmt_list); ;
    break;}
case 232:
#line 483 "parser.y"
{ yyval.expr = ExprNode::BlockExpr(ExprNode::block_expr, 0, 0); ;
    break;}
case 233:
#line 486 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 234:
#line 487 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 235:
#line 488 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 236:
#line 491 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_expr, 0, yyvsp[0].expr, 0); ;
    break;}
case 237:
#line 494 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_while, yyvsp[-1].expr, yyvsp[0].expr, 0); ;
    break;}
case 238:
#line 495 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_while, yyvsp[-1].expr, yyvsp[0].expr, 0); ;
    break;}
case 239:
#line 498 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_for, yyvsp[-1].expr, yyvsp[0].expr, yyvsp[-3].identifier); ;
    break;}
case 240:
#line 499 "parser.y"
{ yyval.expr = ExprNode::CycleExpr(ExprNode::loop_for, yyvsp[-1].expr, yyvsp[0].expr, yyvsp[-3].identifier); ;
    break;}
case 241:
#line 502 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 242:
#line 503 "parser.y"
{ yyval.expr = ExprNode::AddElseBlock(yyvsp[-2].expr, yyvsp[0].expr) ;
    break;}
case 243:
#line 507 "parser.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 244:
#line 508 "parser.y"
{ yyval.expr = ExprNode::AddIfBlock(yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 245:
#line 511 "parser.y"
{ yyval.expr = ExprNode::IfExpr(ExprNode::if_expr, yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 246:
#line 512 "parser.y"
{ yyval.expr = ExprNode::IfExpr(ExprNode::if_expr, yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 247:
#line 518 "parser.y"
{ yyval.type = new TypeNode(TypeNode::bool_); ;
    break;}
case 248:
#line 519 "parser.y"
{ yyval.type = new TypeNode(TypeNode::char_); ;
    break;}
case 249:
#line 520 "parser.y"
{ yyval.type = new TypeNode(TypeNode::float_); ;
    break;}
case 250:
#line 521 "parser.y"
{ yyval.type = new TypeNode(TypeNode::int_); ;
    break;}
case 251:
#line 522 "parser.y"
{ yyval.type = new TypeNode(TypeNode::string_); ;
    break;}
case 252:
#line 523 "parser.y"
{ yyval.type = new TypeNode(TypeNode::id_, yyvsp[0].identifier); ;
    break;}
case 253:
#line 524 "parser.y"
{ yyval.type = new TypeNode(TypeNode::array_, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 254:
#line 525 "parser.y"
{ yyval.type = new TypeNode(TypeNode::array_, yyvsp[-3].type, yyvsp[-1].expr); ;
    break;}
case 255:
#line 531 "parser.y"
{ yyval.vis = pub; ;
    break;}
case 256:
#line 532 "parser.y"
{ yyval.vis = self; ;
    break;}
case 257:
#line 533 "parser.y"
{ yyval.vis = super; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 536 "parser.y"


void yyerror(char const *s)
{
    printf("%s\n",s);
}
