/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
static yyconst short int yy_accept[323] =
    {   0,
        0,    0,    0,    0,    0,    0,   90,   90,    0,    0,
      137,  135,    1,    2,   59,   95,   49,   57,  113,   79,
       80,   47,   45,   85,   46,   75,   48,  126,  126,   87,
       86,   53,   50,   54,  132,  132,   81,   82,   60,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   83,   58,   84,  114,  124,  125,   96,
       97,  107,  108,   90,   91,   92,  110,  111,  112,   52,
       69,   63,   70,   67,   65,   66,   78,   76,   89,   94,
       68,  130,  126,  134,  134,  126,  134,  134,  134,  134,
      134,   88,   61,   55,   51,   56,   62,  133,  132,  132,

      132,   72,    3,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,   12,  132,  132,  132,   14,  132,
       16,  132,  132,  132,  132,  132,  132,  109,    0,  132,
      132,  132,  132,  132,  132,  132,  132,  132,   71,   64,
      114,  121,  120,  118,  119,  115,  116,  117,    0,    0,
       96,  103,  104,  101,  102,   98,   99,  100,    0,    0,
       90,   92,   92,   93,  110,  112,   77,   94,  130,    0,
      134,    0,  131,  126,  134,  134,  134,  127,  134,  134,
      128,  129,   73,   74,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,   41,   42,  132,   13,   39,   40,

      132,   17,  132,  132,   20,  132,   22,   23,   24,  132,
      132,  132,  132,  132,  132,  132,  132,  132,   35,  132,
      132,    0,    0,    0,    0,  130,    0,    0,  131,  131,
      134,  131,  126,  134,  134,   27,  132,   38,  132,   44,
      132,  132,  132,    8,    9,  132,  132,   15,   18,  132,
       21,  132,   26,  132,  132,  132,  132,   32,   33,  132,
      132,  132,    0,  123,    0,  106,    0,  130,  130,  131,
        0,  134,  134,  134,  132,    4,    5,  132,    7,  132,
       11,   19,  132,  132,  132,   30,   31,  132,   36,   37,
        0,    0,    0,    0,  130,    0,  127,  128,  129,   43,

      132,   10,   25,   28,   29,   34,    0,    0,    0,    0,
      131,  132,    0,    0,    0,    0,    6,    0,  122,    0,
      105,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   23,   25,   25,   26,   27,   28,
       29,   30,    1,    1,   31,   31,   31,   31,   32,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   34,   33,   33,   33,   33,   33,   33,   33,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   33,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   33,   63,   64,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[66] =
    {   0,
        1,    2,    1,    3,    4,    1,    1,    1,    5,    1,
        1,    6,    7,    1,    7,    1,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    1,    1,    1,
        9,   10,   11,   11,    1,   12,    1,    1,   13,    9,
        9,    9,    9,   10,   14,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    1,    1,    1
    } ;

static yyconst short int yy_base[349] =
    {   0,
        0,    0,   57,   58,   66,   67,   68,   71,   72,   73,
      807,  808,  808,  808,  777,  808,  776,   68,  808,  808,
      808,  775,  774,  808,   52,  786,   67,   88,   64,  775,
      808,   57,  771,   58,  795,  110,  808,  808,  769,   95,
      111,  122,  120,  152,  158,  149,  148,   97,  153,  156,
      157,  159,  161,  808,  154,  808,    0,  808,  180,    0,
      808,  808,  212,    0,  808,   78,    0,  808,  791,  808,
      808,  808,  808,  808,  808,  808,  808,  767,  808,    0,
      808,  204,  133,    0,  261,  271,  215,  771,  773,  238,
      302,  808,  764,  808,  808,  808,  763,  808,  787,  186,

      176,  808,  786,  167,  195,  203,  192,  238,  112,  187,
      183,  243,   96,  247,  785,  191,  246,  249,  784,  248,
      783,  251,  261,  271,  294,  295,  264,  808,   86,  303,
      268,  296,  284,  300,  302,  305,  313,  325,  808,  808,
        0,  808,  808,  808,  808,  808,  808,  808,  723,  344,
        0,  808,  808,  808,  808,  808,  808,  808,  720,  356,
        0,  765,  318,  808,    0,  770,  808,    0,  327,  751,
        0,  363,  371,    0,    0,  745,  747,  379,  740,  741,
      707,  706,  808,  808,  309,  307,  395,  366,  345,  346,
      397,  400,  401,  403,  749,  748,  404,  744,  743,  737,

      405,  736,  407,  297,  730,  409,  729,  728,  727,  408,
      411,  410,  413,  415,  416,  418,  419,  417,  724,  420,
      422,    0,    0,    0,    0,  393,  415,  705,  676,    0,
      699,    0,    0,  698,  693,  709,  425,  703,  427,  702,
      428,  430,  429,  701,  695,  431,  435,  694,  692,  436,
      688,  432,  671,  442,  438,  437,  439,  659,  657,  444,
      447,  454,  598,  808,  594,  808,  481,  584,  808,  576,
      595,  595,  588,  581,  461,  592,  591,  445,  590,  464,
      589,  530,  465,  446,  466,  529,  528,  470,  527,  526,
      490,  489,  488,  487,  480,  502,    0,    0,    0,  514,

      477,  511,  509,  508,  507,  505,  469,  273,  145,  139,
      808,  478,  445,   84,  454,   59,   85,  455,  808,  456,
      808,  808,  535,  549,  563,  577,  589,  603,  617,  631,
      645,  659,  673,  680,  687,  694,  701,  708,  715,  324,
      722,  729,  736,  743,  750,  757,  764,  771
    } ;

static yyconst short int yy_def[349] =
    {   0,
      322,    1,  323,  323,  324,  324,  325,  325,  326,  326,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,   28,  322,
      322,  322,  322,  322,  327,  327,  322,  322,  322,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  322,  322,  322,  328,  322,  322,  329,
      322,  322,  322,  330,  322,  331,  332,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  333,
      322,  322,   28,  334,  334,  334,  334,  334,  334,  334,
      334,  322,  322,  322,  322,  322,  322,  322,  327,  327,

      327,  322,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  322,  322,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  322,  322,
      328,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      329,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      330,  331,  331,  322,  332,  322,  322,  333,  335,  322,
      334,  322,  334,   86,   85,  334,  334,  334,  334,  334,
       90,   91,  322,  322,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  336,  337,  338,  339,  335,  340,  322,  341,  173,
      334,  334,  334,  334,  334,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  342,  322,  343,  322,  322,  344,  322,  341,
      322,  334,  334,  334,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      345,  342,  346,  343,  344,  322,  334,  334,  334,  327,

      327,  327,  327,  327,  327,  327,  347,  345,  348,  346,
      322,  327,  322,  347,  322,  348,  327,  322,  322,  322,
      322,    0,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322
    } ;

static yyconst short int yy_nxt[874] =
    {   0,
       12,   13,   14,   15,   16,   12,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   30,   31,   32,   33,   34,
       35,   35,   35,   36,   37,   12,   38,   39,   35,   40,
       41,   42,   35,   43,   44,   35,   35,   45,   35,   46,
       47,   35,   35,   48,   49,   50,   51,   52,   35,   53,
       35,   35,   54,   55,   56,   58,   58,   61,   61,   65,
       62,   62,   65,   68,   68,   72,   69,   69,   79,   66,
       76,   77,   66,   80,   93,   94,   96,   97,   98,  163,
      128,  129,   59,   59,  164,   81,   73,  316,   98,   98,

       98,   63,   63,   82,   84,   83,   83,   83,   83,   83,
       83,   83,   83,   98,   98,   98,   84,  196,   84,   85,
       84,   84,  314,   98,   84,   98,   86,   84,   87,   84,
       84,   85,   88,   84,   84,   89,   84,   84,   84,   84,
       90,   84,   84,   84,   84,   84,   84,   84,   91,   84,
      103,   98,   98,  100,  127,   98,   98,  128,  129,   98,
       98,   98,   98,  104,   98,  105,  101,  192,  106,  109,
       98,  110,  112,   84,  107,  113,  108,  310,  117,   98,
      111,  118,  139,  316,  142,   84,   98,  124,  143,   98,
       98,  114,  122,   84,   98,   98,  130,  144,   98,  131,

      125,  123,  119,  115,  116,  126,   98,  138,  120,  121,
      136,  134,  132,  133,  137,  145,  152,  140,  135,  187,
      153,  169,  169,  169,  169,  169,  169,  169,  169,  154,
      186,  146,  178,  178,  147,  185,  148,  149,  188,  194,
      150,   98,  189,  190,  193,  198,   98,  155,  170,   98,
       98,   98,   98,  178,   98,  181,  181,  181,  181,  181,
      181,  181,  195,  156,   98,  199,  157,   98,  158,  159,
      200,   98,  160,  172,   98,  172,  181,  191,  173,  173,
      173,  173,  173,  173,  173,  173,   82,   98,  174,  174,
      174,  174,  174,  174,  174,  174,  197,   98,   98,   98,

       98,  201,  175,   98,  208,   98,   98,  202,   98,  174,
       98,  308,   98,  203,  175,  176,   98,  211,  177,  182,
      182,  182,  182,  182,  182,  182,  182,  204,   98,  163,
      268,  268,  182,  182,  164,  212,  205,  214,  250,  215,
      182,  182,  182,  182,  182,  182,  182,  209,   98,   98,
      213,  207,  206,  236,  237,  217,  219,  216,  227,  210,
      218,  223,  223,  223,  223,  223,  223,  223,  220,   98,
      227,  170,  221,  225,  225,  225,  225,  225,  225,  225,
      229,  229,  229,  229,  229,  229,  229,  229,  230,  230,
      230,  230,  230,  230,  230,  230,  178,  178,   98,  240,

       98,  241,  242,   98,   98,  239,   98,   98,   98,  230,
       98,   98,   98,   98,   98,  176,   98,  178,   98,   98,
       98,   98,   98,   98,  227,   98,  231,  267,   98,  267,
       98,   98,   98,   98,   98,   98,  227,  170,   98,   98,
       98,   98,   98,  244,  238,   98,  246,   98,   98,   98,
       98,  245,  251,  243,  248,  253,  260,   98,  256,  247,
      249,  258,  259,  257,   98,  252,  254,   98,   98,   98,
      255,  262,  279,   98,  261,  276,  275,  278,  281,  285,
       98,   98,  282,  318,  277,  280,  283,  304,  288,  284,
      289,  286,  320,  318,  320,  287,  301,  290,  268,  268,

      268,  268,  268,  268,  268,  268,  300,  314,   98,  319,
       98,   98,   98,  306,   98,  302,  303,   98,  321,  319,
      321,  317,  305,  311,  170,  294,  310,  292,  308,   98,
       98,   98,   98,   98,  312,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   99,   98,   98,   98,   98,   99,   99,   99,   99,

      299,   99,   99,  141,  141,  141,  141,  298,  141,  141,
      141,  141,  141,  141,  297,  141,  141,  151,  296,  151,
      271,  151,  151,  151,  151,  151,  151,  151,  170,  151,
      151,  161,  294,  161,  161,  161,  292,  161,  161,  161,
      161,  161,  161,  161,  161,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  165,
       98,  165,   98,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  168,   98,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  171,  171,  171,
      171,   98,  171,  171,  226,   98,  226,   98,   98,  226,

      226,  263,  263,  263,   98,   98,   98,  263,  264,  264,
      264,  264,   98,  274,  264,  265,  265,  265,  273,  272,
      271,  265,  266,  266,  266,  266,  269,   98,  266,  270,
       98,   98,   98,   98,  270,  270,  291,  291,  291,   98,
       98,  291,  291,  293,  293,  293,   98,   98,  293,  293,
      295,   98,   98,  235,  234,  295,  295,  307,  307,  307,
      233,  232,  307,  307,  309,  309,  309,  180,  179,  309,
      309,  313,  313,  313,  228,  166,  313,  313,  315,  315,
      315,  322,  224,  315,  315,  222,   98,   98,   98,   98,
       98,  184,  183,  180,  179,  167,  166,  102,   98,   95,

       92,   78,   75,   74,   71,   70,  322,   11,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322
    } ;

static yyconst short int yy_chk[874] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    6,    7,
        5,    6,    8,    9,   10,   18,    9,   10,   27,    7,
       25,   25,    8,   27,   32,   32,   34,   34,  317,   66,
      129,  129,    3,    4,   66,   27,   18,  316,   40,  113,

       48,    5,    6,   28,   29,   28,   28,   28,   28,   28,
       28,   28,   28,   36,   41,  109,   29,  113,   28,   28,
       28,   28,  314,   43,   29,   42,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       40,   47,   46,   36,   48,   44,   49,   49,   49,   50,
       51,   45,   52,   41,   53,   41,   36,  109,   42,   43,
      104,   43,   44,   83,   42,   44,   42,  310,   45,  101,
       43,   45,   55,  309,   59,   83,  111,   47,   59,  100,
      110,   44,   46,   83,  116,  107,   49,   59,  105,   50,

       47,   46,   45,   44,   44,   47,  106,   53,   45,   45,
       52,   51,   50,   50,   52,   59,   63,   55,   51,  104,
       63,   82,   82,   82,   82,   82,   82,   82,   82,   63,
      101,   59,   87,   87,   59,  100,   59,   59,  105,  111,
       59,  108,  106,  107,  110,  116,  112,   63,   82,  117,
      114,  120,  118,   87,  122,   90,   90,   90,   90,   90,
       90,   90,  112,   63,  123,  117,   63,  127,   63,   63,
      118,  131,   63,   85,  124,   85,   90,  108,   85,   85,
       85,   85,   85,   85,   85,   85,   86,  133,   86,   86,
       86,   86,   86,   86,   86,   86,  114,  125,  126,  132,

      204,  120,   86,  134,  127,  135,  130,  122,  136,   86,
      186,  308,  185,  123,   86,   86,  137,  131,   86,   91,
       91,   91,   91,   91,   91,   91,   91,  124,  138,  163,
      340,  340,   91,   91,  163,  132,  125,  133,  204,  134,
       91,   91,   91,   91,   91,   91,   91,  130,  189,  190,
      132,  126,  125,  185,  186,  135,  137,  134,  169,  130,
      136,  150,  150,  150,  150,  150,  150,  150,  138,  188,
      169,  169,  138,  160,  160,  160,  160,  160,  160,  160,
      172,  172,  172,  172,  172,  172,  172,  172,  173,  173,
      173,  173,  173,  173,  173,  173,  178,  178,  187,  189,

      191,  190,  190,  192,  193,  188,  194,  197,  201,  173,
      203,  210,  206,  212,  211,  173,  213,  178,  214,  215,
      218,  216,  217,  220,  226,  221,  178,  227,  237,  227,
      239,  241,  243,  242,  246,  252,  226,  226,  247,  250,
      256,  255,  257,  192,  187,  254,  194,  260,  278,  284,
      261,  193,  206,  191,  201,  211,  218,  262,  214,  197,
      203,  216,  217,  215,  275,  210,  212,  280,  283,  285,
      213,  221,  243,  288,  220,  239,  237,  242,  247,  255,
      301,  312,  250,  313,  241,  246,  252,  284,  260,  254,
      261,  256,  315,  318,  320,  257,  278,  262,  267,  267,

      267,  267,  267,  267,  267,  267,  275,  307,  306,  313,
      305,  304,  303,  288,  302,  280,  283,  300,  315,  318,
      320,  312,  285,  296,  295,  294,  293,  292,  291,  290,
      289,  287,  286,  282,  301,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  327,  281,  279,  277,  276,  327,  327,  327,  327,

      274,  327,  327,  328,  328,  328,  328,  273,  328,  328,
      328,  328,  328,  328,  272,  328,  328,  329,  271,  329,
      270,  329,  329,  329,  329,  329,  329,  329,  268,  329,
      329,  330,  265,  330,  330,  330,  263,  330,  330,  330,
      330,  330,  330,  330,  330,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  332,
      259,  332,  258,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  333,  253,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  334,  334,  334,
      334,  251,  334,  334,  335,  249,  335,  248,  245,  335,

      335,  336,  336,  336,  244,  240,  238,  336,  337,  337,
      337,  337,  236,  235,  337,  338,  338,  338,  234,  231,
      229,  338,  339,  339,  339,  339,  228,  219,  339,  341,
      209,  208,  207,  205,  341,  341,  342,  342,  342,  202,
      200,  342,  342,  343,  343,  343,  199,  198,  343,  343,
      344,  196,  195,  182,  181,  344,  344,  345,  345,  345,
      180,  179,  345,  345,  346,  346,  346,  177,  176,  346,
      346,  347,  347,  347,  170,  166,  347,  347,  348,  348,
      348,  162,  159,  348,  348,  149,  121,  119,  115,  103,
       99,   97,   93,   89,   88,   78,   69,   39,   35,   33,

       30,   26,   23,   22,   17,   15,   11,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lex.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define CHAR 1

#define STRING 2

#define ML_COMMENT 3

#define SHIELD_STRING 4

#line 12 "lex.l"
	#include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <iostream>
    #include <string>
    #include <ctype.h>
    using namespace std;

    char str[1024];
    string stdstr = "";
    int lineNumber = 1;
    int octothorpeCount = 0;
#line 691 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 26 "lex.l"



    void removeUnderline();
    void removeType(char *typeName);
	void convertCharacterCodeToString(char characterCode[], int startPosition, char *string);


#line 847 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 323 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 808 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 35 "lex.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lex.l"
{ printf("Found KW_AS: %s\n", yytext); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "lex.l"
{ printf("Found KW_BREAK: %s\n", yytext); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 39 "lex.l"
{ printf("Found KW_CONST: %s\n", yytext); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "lex.l"
{ printf("Found KW_CONTINUE: %s\n", yytext); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "lex.l"
{ printf("Found KW_CRATE: %s\n", yytext); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "lex.l"
{ printf("Found KW_ELSE: %s\n", yytext); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "lex.l"
{ printf("Found KW_ENUM: %s\n", yytext); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "lex.l"
{ printf("Found KW_EXTERN: %s\n", yytext); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "lex.l"
{ printf("Found KW_FALSE: %s\n", yytext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "lex.l"
{ printf("Found KW_FN: %s\n", yytext); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "lex.l"
{ printf("Found KW_FOR: %s\n", yytext); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "lex.l"
{ printf("Found KW_IF: %s\n", yytext); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "lex.l"
{ printf("Found KW_IMPL: %s\n", yytext); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "lex.l"
{ printf("Found KW_IN: %s\n", yytext); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "lex.l"
{ printf("Found KW_LET: %s\n", yytext); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "lex.l"
{ printf("Found KW_LOOP: %s\n", yytext); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "lex.l"
{ printf("Found KW_MATCH: %s\n", yytext); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "lex.l"
{ printf("Found KW_MOD: %s\n", yytext); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "lex.l"
{ printf("Found KW_MOVE: %s\n", yytext); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "lex.l"
{ printf("Found KW_MUT: %s\n", yytext); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "lex.l"
{ printf("Found KW_PUB: %s\n", yytext); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "lex.l"
{ printf("Found KW_REF: %s\n", yytext); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "lex.l"
{ printf("Found KW_RETURN: %s\n", yytext); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "lex.l"
{ printf("Found KW_SELFVALUE: %s\n", yytext); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "lex.l"
{ printf("Found KW_SELFTYPE: %s\n", yytext); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "lex.l"
{ printf("Found KW_STATIC: %s\n", yytext); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "lex.l"
{ printf("Found KW_STRUCT: %s\n", yytext); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "lex.l"
{ printf("Found KW_SUPER: %s\n", yytext); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "lex.l"
{ printf("Found KW_TRAIT: %s\n", yytext); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "lex.l"
{ printf("Found KW_TRUE: %s\n", yytext); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "lex.l"
{ printf("Found KW_TYPE: %s\n", yytext); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "lex.l"
{ printf("Found KW_UNSAFE: %s\n", yytext); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "lex.l"
{ printf("Found KW_USE: %s\n", yytext); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "lex.l"
{ printf("Found KW_WHERE: %s\n", yytext); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "lex.l"
{ printf("Found KW_WHILE: %s\n", yytext); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 74 "lex.l"
{ printf("Found TYPE_BOOL: %s\n", yytext); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 75 "lex.l"
{ printf("Found TYPE_I32: %s\n", yytext); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 76 "lex.l"
{ printf("Found TYPE_I64: %s\n", yytext); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 77 "lex.l"
{ printf("Found TYPE_F32: %s\n", yytext); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 78 "lex.l"
{ printf("Found TYPE_F64: %s\n", yytext); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 79 "lex.l"
{ printf("Found TYPE_STRING: %s\n", yytext); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 80 "lex.l"
{ printf("Found TYPE_CHAR: %s\n", yytext); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "lex.l"
{ printf("Found OPERATOR_PLUS: %s\n", yytext); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "lex.l"
{ printf("Found OPERATOR_MINUS: %s\n", yytext); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "lex.l"
{ printf("Found OPERATOR_MUL: %s\n", yytext); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "lex.l"
{ printf("Found OPERATOR_DIV: %s\n", yytext); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "lex.l"
{ printf("Found OPERATOR_MOD: %s\n", yytext); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 89 "lex.l"
{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 90 "lex.l"
{ printf("Found OPERATOR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 91 "lex.l"
{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 92 "lex.l"
{ printf("Found OPERATOR_LESS: %s\n", yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 93 "lex.l"
{ printf("Found OPERATOR_MORE: %s\n", yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 94 "lex.l"
{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 95 "lex.l"
{ printf("Found OPERATOR_MORE_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 97 "lex.l"
{ printf("Found OPERATOR_AMPERSAND: %s\n", yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 98 "lex.l"
{ printf("Found OPERATOR_BIT_OR: %s\n", yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 99 "lex.l"
{ printf("Found OPERATOR_BIT_NOT: %s\n", yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 100 "lex.l"
{ printf("Found OPERATOR_BIT_XOR: %s\n", yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 101 "lex.l"
{ printf("Found OPERATOR_BIT_LEFT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 102 "lex.l"
{ printf("Found OPERATOR_BIT_RIGHT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 104 "lex.l"
{ printf("Found OPERATOR_AND: %s\n", yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 105 "lex.l"
{ printf("Found OPERATOR_OR: %s\n", yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 107 "lex.l"
{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 108 "lex.l"
{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 109 "lex.l"
{ printf("Found OPERATOR_MUL_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 110 "lex.l"
{ printf("Found OPERATOR_DIV_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 111 "lex.l"
{ printf("Found OPERATOR_MOD_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 112 "lex.l"
{ printf("Found OPERATOR_BIT_AND_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 113 "lex.l"
{ printf("Found OPERATOR_BIT_OR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 114 "lex.l"
{ printf("Found OPERATOR_BIT_XOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "lex.l"
{ printf("Found OPERATOR_BIT_LEFT_SHIFT_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "lex.l"
{ printf("Found OPERATOR_BIT_RIGHT_SHIFT_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 118 "lex.l"
{ printf("Found OPERATOR_POINT: %s\n", yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 119 "lex.l"
{ printf("Found OPERATOR_RANGE: %s\n", yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 120 "lex.l"
{ printf("Found OPERATOR_RANGE_ASSIGMENT: %s\n", yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 121 "lex.l"
{ printf("Found OPERATOR_ARROW: %s\n", yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "lex.l"
{ printf("Found LEFT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "lex.l"
{ printf("Found RIGHT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "lex.l"
{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "lex.l"
{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "lex.l"
{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "lex.l"
{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 130 "lex.l"
{ printf("Found COMMA: %s\n", yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 131 "lex.l"
{ printf("Found SEMICOLON: %s\n", yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 132 "lex.l"
{ printf("Found COLON: %s\n", yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 133 "lex.l"
{ printf("Found TWO_COLON: %s\n", yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 136 "lex.l"
{ strcpy(str,""); BEGIN(ML_COMMENT); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 137 "lex.l"
{ strcat(str,yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 138 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 139 "lex.l"
{ strcat(str,yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 140 "lex.l"
{ printf("Found ML_COMMENT: %s\n", str);  BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(ML_COMMENT):
#line 141 "lex.l"
{ printf("ML_COMMENT Error in line %d: comment are not closed\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 143 "lex.l"
{ printf("Found COMMENT: %s\n", yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 145 "lex.l"
{ stdstr = ""; BEGIN(STRING); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 146 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 147 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 148 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 149 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 150 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 101:
YY_RULE_SETUP
<<<<<<< HEAD
#line 151 "lex.l"
{ stdstr += "\0"; }
=======
#line 149 "lex.l"
{ stdstr.push_back('\0'); }
>>>>>>> origin/lr_2_lexer
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 152 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 153 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 154 "lex.l"
{ stdstr += "\'"; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 155 "lex.l"
{
    int x = strtol(yytext + 3,NULL, 16); 
    if(x <= 127)
    {
        char tmp[2];
        tmp[0] = x;
        tmp[1] = 0;
        stdstr += tmp;
    }
    else
    {
     printf("CHAR Error in line %d: Unicode does not supported\n", lineNumber);
    }
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 169 "lex.l"
{
    char string[2];
    convertCharacterCodeToString(yytext, 2, string);
    stdstr += string;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
<<<<<<< HEAD
#line 174 "lex.l"
{ cout << "Found STRING: " << stdstr << endl; BEGIN(INITIAL);}
=======
#line 171 "lex.l"
{ cout << "Found STRING: " << stdstr << endl << stdstr.size() << endl; BEGIN(INITIAL);}
>>>>>>> origin/lr_2_lexer
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 175 "lex.l"
{ printf("STRING Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 176 "lex.l"
{ printf("STRING Error in line %d: slash\n", lineNumber); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 178 "lex.l"
{stdstr = ""; octothorpeCount = strlen(yytext) - 2; BEGIN(SHIELD_STRING);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 179 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 180 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 181 "lex.l"
{
    int tmp  = strlen(yytext) - 1;
    if(tmp == octothorpeCount)
    {
        cout << "Found STRING: " << stdstr << endl; BEGIN(INITIAL);
    }
    else
    {
         stdstr += yytext;
    }

}
	YY_BREAK
case YY_STATE_EOF(SHIELD_STRING):
#line 193 "lex.l"
{ printf("SHIELD_STRING Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 196 "lex.l"
{ strcpy(str,""); BEGIN(CHAR); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 197 "lex.l"
{ strcat(str,yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 198 "lex.l"
{ strcat(str,"\n"); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 199 "lex.l"
{ strcat(str,"\r"); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 200 "lex.l"
{ strcat(str,"\t"); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 201 "lex.l"
{ strcat(str,"\0"); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 202 "lex.l"
{ strcat(str,"\\"); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 203 "lex.l"
{ strcat(str,"\'"); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 204 "lex.l"
{ strcat(str,"\""); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 205 "lex.l"
{
    int x = strtol(yytext + 3,NULL, 16);
    if(x <= 127)
    {
        char tmp[2];
        tmp[0] = x;
        tmp[1] = 0;
        strcat(str, tmp);
    }
    else
    {
     printf("CHAR Error in line %d: Unicode does not supported\n", lineNumber);
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 219 "lex.l"
{
    char string[2];
    convertCharacterCodeToString(yytext, 2, string);
    strcat(str, string);
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 224 "lex.l"
{
    if(strlen(str) == 1) {
        printf("Found CHAR:  %c\n", str[0]);
    }
    else if(strlen(str) == 0)
    {
        printf("CHAR Error in line %d: empty char literal\n", lineNumber);
    }
    else
    {
        printf("CHAR Error in line %d: more than one char in quote\n", lineNumber);
    }
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(CHAR):
#line 238 "lex.l"
{ printf("CHAR Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 239 "lex.l"
{ printf("CHAR Error in line %d: slash\n", lineNumber); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 242 "lex.l"
{

    removeType("i32");
    removeUnderline();
    printf("Found DECIMAL_NUMBER: %d\n", atoi(str));
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 249 "lex.l"
{

    removeType("i32");
    removeUnderline();
    if(strlen(str) > 2)
    {
         printf("Found BIN_NUMBER: %d\n", strtol(str + 2, NULL, 2));
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 263 "lex.l"
{

    removeType("i32");
    removeUnderline();
    if(strlen(str) > 2)
    {
         printf("Found OCTAL_NUMBER: %d\n", strtol(str + 2, NULL, 8));
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 277 "lex.l"
{

    removeType("i32");
    removeUnderline();
    if(strlen(str) > 2)
    {
         printf("Found HEXADECIMAL_NUMBER: %d\n", strtol(str + 2, NULL, 16));
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 291 "lex.l"
{
    removeType("f64");
    removeUnderline();
    printf("Found DOUBLE: %lf\n", atof(str), str);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 297 "lex.l"
{
    removeType("f64");
    removeUnderline();
    printf("Found DOUBLE: %lf\n", atof(str));
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 305 "lex.l"
{ printf("Found IDENTIFIER: %s\n", yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 306 "lex.l"
{ printf("Found MACROS: %s\n", yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 307 "lex.l"
{ printf("Error in line %d: incorrect IDENTIFIER\n", lineNumber); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 308 "lex.l"
{ printf("Error in line %d: incorrect character in code\n", lineNumber); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 309 "lex.l"
ECHO;
	YY_BREAK
#line 1733 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 323 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 323 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 322);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 309 "lex.l"


void convertCharacterCodeToString(char characterCode[], int startPosition, char *string)
{
    string[0] = strtol(characterCode + startPosition,NULL, 16);
    string[1] = '\0';
}

void removeUnderline()
{
  int pos = 0;
  for(int i = 0; i < strlen(yytext); i++)
  {
        if(yytext[i] != '_')
        {
            str[pos++] = yytext[i];
        }
  }

  str[pos] = '\0';
  strcpy(yytext, str);
}

void removeType(char *typeName)
{
    strcpy(str, yytext);
    char* p = strstr(str, typeName);
    if(p != NULL)
    {
        int pos = strlen(str)  - strlen(typeName);
        str[pos] = 0;
    }
}


int main(int argc, char** argv) {

    if (argc != 2) {
        printf("Filename is not found");
        return 1;
    }

    const char *filename= argv[1];
    
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("File opening error");
        return 1;
    }

    yyin = file;
    yylex();
    fclose(file);

    return 0;
}


