/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
static yyconst short int yy_accept[352] =
    {   0,
        0,    0,    0,    0,    0,    0,   92,   92,    0,    0,
      140,  138,    2,    1,   61,   97,   51,   59,  114,   81,
       82,   49,   47,   87,   48,   77,   50,  128,  128,   89,
       88,   55,   52,   56,  135,  135,   83,   84,   62,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   85,   60,   86,  115,  125,  126,   98,
       99,  108,  109,   92,   93,   94,  111,  112,  113,   54,
       71,   65,   72,    0,    0,   69,   67,   68,   80,   78,
      132,   91,   96,   70,    0,  133,  128,  137,  137,  128,
      137,  137,  137,  137,  137,   90,   63,   57,   53,   58,

       64,  136,  135,  135,  135,   74,    3,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,   10,  135,  135,
      135,   12,  135,   14,  135,  135,  135,  135,  135,  135,
      110,    0,  135,  135,  135,  135,  135,  135,  135,  135,
      135,   73,   66,  115,  122,  121,  119,  120,  116,  117,
      118,    0,    0,   98,  105,  103,  104,  100,  101,  102,
        0,    0,   92,   94,   94,   95,  111,  113,    0,    0,
       79,  132,    0,    0,   96,    0,    0,  133,    0,  137,
        0,  134,  128,  137,  137,  137,  129,  137,  137,  130,
      131,   75,   76,  135,  135,  135,  135,  135,  135,  135,

      135,  135,   43,   44,  135,   11,   41,   42,  135,   15,
      135,  135,   18,  135,   20,   21,   22,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   32,  135,  135,    0,
        0,    0,    0,   35,    0,    0,  132,    0,    0,  127,
      127,  133,    0,    0,  134,  134,  137,  134,  128,  137,
      137,   25,  135,   40,  135,   46,  135,  135,    7,    8,
      135,  135,   13,   16,  135,   19,  135,   24,  135,  135,
      135,  135,   38,   30,  135,  135,  135,    0,  124,    0,
      107,    0,   36,  132,  132,  127,    0,    0,    0,    0,
      133,  133,  134,    0,  137,  137,  137,  135,    4,    5,

      135,  135,   39,   17,  135,  135,  135,   28,   29,  135,
       33,   34,    0,    0,    0,    0,    0,  127,  127,  127,
      133,    0,  129,  130,  131,   45,  135,    9,   23,   26,
       27,   31,    0,    0,    0,    0,    0,  134,  135,    0,
        0,    0,    0,    0,    6,    0,  123,    0,  106,   37,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   23,   25,   25,   26,   27,   28,
       29,   30,    1,    1,   31,   31,   31,   31,   32,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   34,   33,   33,   33,   33,   33,   33,   33,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   33,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   33,   63,   64,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[66] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    8,    1,    8,    9,    1,   10,   10,   10,
       10,   10,   10,   10,   10,    1,    1,    1,    1,    1,
       11,   12,   13,   13,    1,   14,    1,    1,   15,   11,
       16,   11,   11,   12,   17,   13,   13,   13,   13,   13,
       13,   13,   18,   13,   13,   13,   13,   13,   13,   13,
       18,   13,    1,    1,    1
    } ;

static yyconst short int yy_base[385] =
    {   0,
        0,    0,   57,   58,   65,   66,   69,   70,   71,   72,
      945,  997,  997,  997,  915,  997,  908,   70,  997,  997,
      997,  907,  902,  997,   50,   67,   83,  125,   43,  903,
      997,   69,  899,   76,  923,  147,  997,  997,  897,   99,
      107,  148,  138,  185,  189,  110,  190,  103,  192,  188,
      196,  198,  106,  997,  178,  997,    0,  997,  211,    0,
      997,  997,  221,    0,  997,   96,    0,  997,  917,  997,
      997,  997,  997,  862,  875,  997,  997,  997,  997,  889,
       85,  997,    0,  997,  116,   93,  162,    0,  270,  294,
       97,  893,  893,  281,  325,  997,  883,  997,  997,  997,

      882,  997,  906,  210,  201,  997,  905,  208,  215,  204,
      213,  214,  217,  207,  119,  118,  224,  900,  229,  251,
      227,  899,  223,  892,  249,  258,  277,  282,  283,  294,
      997,  119,  317,  303,  318,  276,  319,  324,  304,  327,
      328,  997,  997,    0,  997,  997,  997,  997,  997,  997,
      997,  832,  361,    0,  997,  997,  997,  997,  997,  997,
      831,  368,    0,  870,  312,  997,    0,  880,  822,  828,
      997,  361,  118,  853,    0,  856,  334,  363,  846,    0,
      378,  391,    0,    0,  845,  846,  415,  842,  843,  419,
      421,  997,  997,  359,  371,  305,  416,  390,  421,  422,

      423,  424,  858,  857,  425,  856,  855,  848,  434,  842,
      428,  437,  841,  436,  840,  839,  838,  435,  438,  439,
      440,  442,  443,  444,  445,  447,  837,  446,  449,    0,
        0,    0,    0,  132,  778,  484,  774,  795,  455,  411,
      492,  488,  209,  794,  769,    0,  778,    0,    0,  776,
      744,  757,  466,  750,  451,  741,  467,  471,  739,  732,
      472,  481,  724,  714,  488,  709,  486,  708,  490,  455,
      491,  517,  707,  706,  518,  522,  524,  670,  997,  594,
      997,  527,  997,  586,  997,  530,  518,  557,    0,  566,
      585,  997,  584,  604,  607,  606,  605,  519,  620,  619,

      530,  540,  618,  617,  541,  552,  538,  615,  614,  554,
      613,  612,  576,  575,  574,  573,  567,  521,  581,    0,
      565,  550,    0,    0,    0,  567,  539,  566,  560,  558,
      461,  457,  322,  315,  312,  288,  217,  997,  563,  508,
      213,  567,  196,   92,  116,  569,  997,  570,  997,  997,
      997,  635,  653,  671,  689,  704,  722,  740,  758,  776,
      794,  803,  820,  830,  838,  452,  855,  856,  864,  872,
      881,  889,  898,  906,  551,  915,  923,  931,  939,  947,
      955,  963,  971,  979
    } ;

static yyconst short int yy_def[385] =
    {   0,
      351,    1,  352,  352,  353,  353,  354,  354,  355,  355,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,   28,  351,
      351,  351,  351,  351,  356,  356,  351,  351,  351,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  351,  351,  351,  357,  351,  351,  358,
      351,  351,  351,  359,  351,  360,  361,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      362,  351,  363,  351,  351,  364,   28,  365,  365,  365,
      365,  365,  365,  365,  365,  351,  351,  351,  351,  351,

      351,  351,  356,  356,  356,  351,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      351,  351,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  351,  351,  357,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  358,  351,  351,  351,  351,  351,  351,
      351,  351,  359,  360,  360,  351,  361,  351,  351,  351,
      351,  362,  366,  351,  363,  351,  367,  368,  351,  365,
      351,  365,   90,   89,  365,  365,  365,  365,  365,   94,
       95,  351,  351,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  369,
      370,  371,  372,  351,  351,  351,  373,  351,  367,  374,
      351,  368,  375,  351,  376,  182,  365,  365,  365,  365,
      365,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  377,  351,  378,
      351,  351,  351,  373,  351,  351,  351,  351,  379,  351,
      380,  351,  376,  351,  365,  365,  365,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  381,  377,  382,  378,  351,  351,  351,  379,
      380,  351,  365,  365,  365,  356,  356,  356,  356,  356,
      356,  356,  383,  381,  384,  382,  351,  351,  356,  351,
      383,  351,  384,  351,  356,  351,  351,  351,  351,  351,
        0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351
    } ;

static yyconst short int yy_nxt[1063] =
    {   0,
       12,   13,   14,   15,   16,   12,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   30,   31,   32,   33,   34,
       35,   35,   35,   36,   37,   12,   38,   39,   35,   40,
       41,   42,   35,   43,   44,   35,   35,   45,   35,   46,
       47,   35,   35,   48,   49,   50,   51,   52,   35,   53,
       35,   35,   54,   55,   56,   58,   58,   61,   61,   62,
       62,   65,   65,   68,   68,   69,   69,   72,   78,   79,
       66,   66,   80,   88,   81,   81,   81,   81,   81,   81,
       81,   81,   59,   59,   82,   88,   97,   98,   73,   83,

       63,   63,  102,   88,  100,  101,  102,  165,  177,  102,
      102,   84,  166,  102,  187,  187,  173,   85,   85,  102,
       74,  102,  102,  131,  132,   75,   85,   85,  173,  174,
      236,  176,  236,  282,  282,  187,  350,  179,  203,  204,
       86,  102,   87,   87,   87,   87,   87,   87,   87,   87,
      102,  102,  141,  125,  107,   88,   89,   88,   88,  108,
      130,  109,  126,   90,   88,   91,   88,   88,   89,   92,
       88,   88,   93,   88,   88,   88,   88,   94,   88,   88,
       88,   88,   88,   88,   88,   95,   88,  112,  102,  113,
      104,  102,  102,  102,  110,  102,  131,  132,  114,  102,

      111,  102,   88,  105,  102,  115,  142,  102,  116,  120,
      102,  102,  121,  102,   88,  145,  102,  102,  102,  146,
      102,  290,   88,  290,  117,  155,  102,  102,  147,  127,
      102,  134,  102,  122,  343,  133,  118,  119,  156,  123,
      124,  143,  128,  198,  135,  136,  148,  129,  208,  139,
      137,  341,  102,  140,  102,  195,  157,  138,  197,  194,
      196,  102,  149,  202,  199,  150,  344,  151,  152,  200,
      207,  153,  158,  205,  201,  159,  209,  160,  161,  102,
      102,  162,  181,  206,  181,  102,  102,  182,  182,  182,
      182,  182,  182,  182,  182,   85,   85,  102,  190,  190,

      190,  190,  190,  190,  190,  210,  102,  102,  102,   86,
      211,  183,  183,  183,  183,  183,  183,  183,  183,  190,
      102,  102,  102,  165,  213,  184,  336,  102,  166,  222,
      102,  102,  183,  212,  216,  239,  239,  184,  185,  215,
      214,  186,  191,  191,  191,  191,  191,  191,  191,  191,
      343,  240,  219,  334,  254,  191,  191,  220,  223,  226,
      341,  217,  102,  191,  191,  191,  191,  191,  191,  191,
      227,  228,  221,  218,  102,  229,  224,  225,  231,  231,
      231,  231,  231,  231,  231,  233,  233,  233,  233,  233,
      233,  233,  173,  102,  243,  245,  245,  245,  245,  245,

      245,  245,  245,  252,  173,  174,  243,  179,  246,  246,
      246,  246,  246,  246,  246,  246,   85,   85,  253,  102,
       85,   85,   85,   85,  102,  102,  102,  102,  102,  246,
      176,  102,  187,  187,  176,  185,  176,  102,  102,  102,
      102,  102,  102,  102,  256,  102,  102,  102,  102,  102,
      102,  287,  102,  187,  102,  255,  239,  239,  102,  237,
      102,  237,  247,  288,  102,  259,  250,  261,  251,  102,
      102,  289,  240,  260,  102,  102,  257,  258,  265,  266,
      262,  264,  268,  263,  102,  271,  275,  273,  274,  102,
      272,  102,  267,  102,  102,  269,  307,  270,  277,  299,

      276,  237,  237,  237,  237,  237,  237,  237,  237,  286,
      286,  286,  286,  286,  286,  286,  286,  298,  301,  243,
      102,  102,  102,  300,  303,  102,  302,  102,  282,  282,
      286,  243,  179,  102,  304,  318,  318,  306,  318,  318,
      305,  102,  102,  102,  102,  308,  346,  286,  286,  286,
      286,  286,  286,  286,  286,  102,  318,  102,  291,  318,
      291,  102,  310,  102,  326,  311,  102,  312,  286,  102,
      102,  338,  347,  309,  319,  319,  319,  319,  319,  319,
      319,  327,  317,  291,  291,  291,  291,  291,  291,  291,
      291,  328,  329,  330,  331,  319,  339,  332,  319,  319,

      319,  319,  319,  319,  319,  348,  345,  346,  348,  179,
      337,  316,  336,  314,  334,  102,  102,  102,  102,  319,
      102,  102,  102,  102,  325,  324,  323,  322,  294,  179,
      174,  349,  316,  347,  349,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,  103,  314,  102,
      102,  102,  102,  103,  103,  103,  103,  102,  103,  103,
      103,  103,  144,  144,  144,  144,  144,  102,  144,  144,
      144,  144,  144,  144,  144,  102,  144,  144,  144,  144,
      154,  154,  102,  154,  102,  154,  154,  154,  154,  154,
      154,  154,  154,  102,  154,  154,  154,  154,  163,  163,
      102,  163,  163,  163,  297,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  167,  167,  296,  167,  295,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  172,  294,  172,  292,  285,  172,  174,  172,
      175,  175,  283,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  178,  178,
      102,  102,  102,  102,  102,  102,  178,  180,  180,  180,
      180,  102,  180,  180,  180,  180,  241,  241,  102,  102,
      102,  102,  249,  248,  241,  242,  189,  242,  188,  244,
      242,  177,  242,  278,  278,  278,  238,  235,  234,  278,
      278,  279,  279,  279,  279,  168,  351,  279,  279,  279,
      280,  280,  280,  232,  230,  102,  280,  280,  281,  281,

      281,  281,  102,  102,  281,  281,  281,  284,  102,  102,
      193,  192,  284,  189,  284,  286,  188,  171,  170,  169,
      286,  286,  168,  286,  293,  106,  102,   99,   96,  293,
       77,  293,  313,  313,  313,   76,   71,  313,  313,  313,
      315,  315,  315,   70,  351,  315,  315,  315,  320,  320,
      320,  351,  351,  320,  320,  320,  321,  351,  351,  351,
      351,  321,  351,  321,  333,  333,  333,  351,  351,  333,
      333,  333,  335,  335,  335,  351,  351,  335,  335,  335,
      340,  340,  340,  351,  351,  340,  340,  340,  342,  342,
      342,  351,  351,  342,  342,  342,   11,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351
    } ;

static yyconst short int yy_chk[1063] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    6,    5,
        6,    7,    8,    9,   10,    9,   10,   18,   25,   25,
        7,    8,   26,   29,   26,   26,   26,   26,   26,   26,
       26,   26,    3,    4,   27,   29,   32,   32,   18,   27,

        5,    6,   40,   29,   34,   34,   48,   66,   86,   53,
       41,   27,   66,   46,   91,   91,   81,   85,   85,  345,
       18,  116,  115,  132,  132,   18,   28,   28,   81,   81,
      173,   85,  173,  234,  234,   91,  344,   86,  115,  116,
       28,   43,   28,   28,   28,   28,   28,   28,   28,   28,
       36,   42,   53,   46,   40,   28,   28,   28,   28,   41,
       48,   41,   46,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   43,   44,   43,
       36,   50,   45,   47,   42,   49,   49,   49,   43,   51,

       42,   52,   87,   36,  105,   44,   55,  110,   44,   45,
      114,  108,   45,  104,   87,   59,  111,  112,  109,   59,
      113,  243,   87,  243,   44,   63,  123,  117,   59,   47,
      121,   50,  119,   45,  343,   49,   44,   44,   63,   45,
       45,   55,   47,  110,   50,   50,   59,   47,  121,   52,
       51,  341,  125,   52,  120,  105,   63,   51,  109,  104,
      108,  126,   59,  114,  111,   59,  337,   59,   59,  112,
      120,   59,   63,  117,  113,   63,  123,   63,   63,  136,
      127,   63,   89,  119,   89,  128,  129,   89,   89,   89,
       89,   89,   89,   89,   89,   90,   90,  130,   94,   94,

       94,   94,   94,   94,   94,  125,  134,  139,  196,   90,
      126,   90,   90,   90,   90,   90,   90,   90,   90,   94,
      133,  135,  137,  165,  128,   90,  336,  138,  165,  136,
      140,  141,   90,  127,  130,  177,  177,   90,   90,  129,
      128,   90,   95,   95,   95,   95,   95,   95,   95,   95,
      335,  177,  134,  334,  196,   95,   95,  135,  137,  139,
      333,  133,  194,   95,   95,   95,   95,   95,   95,   95,
      140,  141,  135,  133,  195,  141,  137,  138,  153,  153,
      153,  153,  153,  153,  153,  162,  162,  162,  162,  162,
      162,  162,  172,  198,  178,  181,  181,  181,  181,  181,

      181,  181,  181,  194,  172,  172,  178,  178,  182,  182,
      182,  182,  182,  182,  182,  182,  187,  187,  195,  197,
      190,  190,  191,  191,  199,  200,  201,  202,  205,  182,
      187,  211,  187,  187,  190,  182,  191,  209,  218,  214,
      212,  219,  220,  221,  198,  222,  223,  224,  225,  228,
      226,  240,  229,  187,  255,  197,  239,  239,  270,  366,
      332,  366,  187,  240,  331,  200,  190,  202,  191,  253,
      257,  240,  239,  201,  258,  261,  199,  199,  212,  214,
      205,  211,  219,  209,  262,  222,  226,  224,  225,  267,
      223,  265,  218,  269,  271,  220,  270,  221,  229,  255,

      228,  236,  236,  236,  236,  236,  236,  236,  236,  241,
      241,  241,  241,  241,  241,  241,  241,  253,  258,  242,
      272,  275,  298,  257,  262,  276,  261,  277,  282,  282,
      241,  242,  242,  301,  265,  287,  287,  269,  318,  318,
      267,  307,  327,  302,  305,  271,  340,  286,  286,  286,
      286,  286,  286,  286,  286,  306,  287,  310,  375,  318,
      375,  330,  275,  329,  298,  276,  339,  277,  286,  328,
      326,  322,  340,  272,  288,  288,  288,  288,  288,  288,
      288,  301,  282,  290,  290,  290,  290,  290,  290,  290,
      290,  302,  305,  306,  307,  288,  327,  310,  319,  319,

      319,  319,  319,  319,  319,  342,  339,  346,  348,  321,
      317,  316,  315,  314,  313,  312,  311,  309,  308,  319,
      304,  303,  300,  299,  297,  296,  295,  294,  293,  291,
      284,  342,  280,  346,  348,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  356,  278,  274,
      273,  268,  266,  356,  356,  356,  356,  264,  356,  356,
      356,  356,  357,  357,  357,  357,  357,  263,  357,  357,
      357,  357,  357,  357,  357,  260,  357,  357,  357,  357,
      358,  358,  259,  358,  256,  358,  358,  358,  358,  358,
      358,  358,  358,  254,  358,  358,  358,  358,  359,  359,
      252,  359,  359,  359,  251,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  361,  361,  250,  361,  247,  361,

      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  362,  245,  362,  244,  238,  362,  237,  362,
      363,  363,  235,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  364,  364,
      227,  217,  216,  215,  213,  210,  364,  365,  365,  365,
      365,  208,  365,  365,  365,  365,  367,  367,  207,  206,
      204,  203,  189,  188,  367,  368,  186,  368,  185,  179,
      368,  176,  368,  369,  369,  369,  174,  170,  169,  369,
      369,  370,  370,  370,  370,  168,  164,  370,  370,  370,
      371,  371,  371,  161,  152,  124,  371,  371,  372,  372,

      372,  372,  122,  118,  372,  372,  372,  373,  107,  103,
      101,   97,  373,   93,  373,  374,   92,   80,   75,   74,
      374,  374,   69,  374,  376,   39,   35,   33,   30,  376,
       23,  376,  377,  377,  377,   22,   17,  377,  377,  377,
      378,  378,  378,   15,   11,  378,  378,  378,  379,  379,
      379,    0,    0,  379,  379,  379,  380,    0,    0,    0,
        0,  380,    0,  380,  381,  381,  381,    0,    0,  381,
      381,  381,  382,  382,  382,    0,    0,  382,  382,  382,
      383,  383,  383,    0,    0,  383,  383,  383,  384,  384,
      384,    0,    0,  384,  384,  384,  351,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lex.l"
#define INITIAL 0
#line 2 "lex.l"
// #include "_tab.h"
#include "parser_tab.cpp"
extern int yyparse();
#define YY_NEVER_INTERACTIVE 1
#define CHAR_EL 1

#define STRING_EL 2

#define ML_COMMENT 3

#define SHIELD_STRING 4

#line 18 "lex.l"
	#include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <iostream>
    #include <string>
    #include <ctype.h>
    using namespace std;

    void removeUnderline(char str[]);
    void removeType(char str[], char *typeName);
    void convertCharacterCodeToString(char characterCode[], int startPosition, char *string);
    int translateNumberByBase(char *input_string);
    void removeSpacesAndUnderlines(char* input);
    int findRightNumberPos(const char *input_string);
    int findSecondDot(const char *input_string);
#line 751 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 35 "lex.l"



    char str[1024];
    string stdstr = "";
    int lineNumber = 1;
    int octothorpeCount = 0;


#line 908 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 352 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 997 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 45 "lex.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "lex.l"
{ printf("Found KW_AS: %s\n", yytext); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "lex.l"
{ printf("Found KW_BREAK: %s\n", yytext); return BREAK;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "lex.l"
{ printf("Found KW_CONST: %s\n", yytext); return CONST;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "lex.l"
{ printf("Found KW_CONTINUE: %s\n", yytext); return CONTINUE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "lex.l"
{ printf("Found KW_ELSE: %s\n", yytext); return ELSE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "lex.l"
{ printf("Found KW_ENUM: %s\n", yytext); return ENUM;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "lex.l"
{ printf("Found KW_EXTERN: %s\n", yytext); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "lex.l"
{ printf("Found KW_FN: %s\n", yytext); return FN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "lex.l"
{ printf("Found KW_FOR: %s\n", yytext); return FOR;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "lex.l"
{ printf("Found KW_IF: %s\n", yytext); return IF;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "lex.l"
{ printf("Found KW_IMPL: %s\n", yytext); return IMPL;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "lex.l"
{ printf("Found KW_IN: %s\n", yytext); return IN;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "lex.l"
{ printf("Found KW_LET: %s\n", yytext); return LET;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "lex.l"
{ printf("Found KW_LOOP: %s\n", yytext); return LOOP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "lex.l"
{ printf("Found KW_MATCH: %s\n", yytext); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "lex.l"
{ printf("Found KW_MOD: %s\n", yytext); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "lex.l"
{ printf("Found KW_MOVE: %s\n", yytext); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "lex.l"
{ printf("Found KW_MUT: %s\n", yytext); return MUT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "lex.l"
{ printf("Found KW_PUB: %s\n", yytext); return PUB;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "lex.l"
{ printf("Found KW_REF: %s\n", yytext); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "lex.l"
{ printf("Found KW_RETURN: %s\n", yytext); return RETURN;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "lex.l"
{ printf("Found KW_SELFVALUE: %s\n", yytext); return SELF;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "lex.l"
{ printf("Found KW_SELFTYPE: %s\n", yytext); return BIG_SELF;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "lex.l"
{ printf("Found KW_STATIC: %s\n", yytext); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "lex.l"
{ printf("Found KW_STRUCT: %s\n", yytext); return STRUCT;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "lex.l"
{ printf("Found KW_SUPER: %s\n", yytext); return SUPER;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "lex.l"
{ printf("Found KW_TRAIT: %s\n", yytext); return TRAIT;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "lex.l"
{ printf("Found KW_TYPE: %s\n", yytext); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "lex.l"
{ printf("Found KW_UNSAFE: %s\n", yytext); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "lex.l"
{ printf("Found KW_USE: %s\n", yytext); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "lex.l"
{ printf("Found KW_WHERE: %s\n", yytext); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "lex.l"
{ printf("Found KW_WHILE: %s\n", yytext); return WHILE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "lex.l"
{ printf("Found KW_MUT_REF: %s\n", yytext); return MUT_REF;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "lex.l"
{ printf("Found KW_SELF_REF: %s\n", yytext); return SELF_REF;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 81 "lex.l"
{ printf("Found KW_MUT_SELF_REF: %s\n", yytext); return MUT_SELF_REF;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "lex.l"
{ printf("Found KW_TRUE: %s\n", yytext); yylval.bool_literal = true; return TRUE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "lex.l"
{ printf("Found KW_FALSE: %s\n", yytext); yylval.bool_literal = false; return FALSE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 86 "lex.l"
{ printf("Found TYPE_BOOL: %s\n", yytext); return BOOL;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 87 "lex.l"
{ printf("Found TYPE_I32: %s\n", yytext); return INT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 88 "lex.l"
{ printf("Found TYPE_I64: %s\n", yytext); return INT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 89 "lex.l"
{ printf("Found TYPE_F32: %s\n", yytext); return FLOAT;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 90 "lex.l"
{ printf("Found TYPE_F64: %s\n", yytext); return FLOAT;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "lex.l"
{ printf("Found TYPE_STRING: %s\n", yytext); return STRING;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "lex.l"
{ printf("Found TYPE_CHAR: %s\n", yytext); return CHAR;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 95 "lex.l"
{ printf("Found OPERATOR_PLUS: %s\n", yytext); return '+';}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 96 "lex.l"
{ printf("Found OPERATOR_MINUS: %s\n", yytext); return '-';}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 97 "lex.l"
{ printf("Found OPERATOR_MUL: %s\n", yytext); return '*';}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 98 "lex.l"
{ printf("Found OPERATOR_DIV: %s\n", yytext); return '/';}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 99 "lex.l"
{ printf("Found OPERATOR_MOD: %s\n", yytext); return '%';}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 101 "lex.l"
{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); return '=';}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 102 "lex.l"
{ printf("Found OPERATOR_EQUAL: %s\n", yytext); return EQUAL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 103 "lex.l"
{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); return NOT_EQUAL;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 104 "lex.l"
{ printf("Found OPERATOR_LESS: %s\n", yytext); return '<';}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 105 "lex.l"
{ printf("Found OPERATOR_MORE: %s\n", yytext); return '>';}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 106 "lex.l"
{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); return LESS_EQUAL;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 107 "lex.l"
{ printf("Found OPERATOR_MORE_OR_EQUAL: %s\n", yytext); return GREATER_EQUAL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 109 "lex.l"
{ printf("Found OPERATOR_AMPERSAND: %s\n", yytext); return '&'; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 110 "lex.l"
{ printf("Found OPERATOR_BIT_OR: %s\n", yytext); return '|';}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 111 "lex.l"
{ printf("Found OPERATOR_BIT_NOT: %s\n", yytext); return '!';}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 112 "lex.l"
{ printf("Found OPERATOR_BIT_XOR: %s\n", yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 113 "lex.l"
{ printf("Found OPERATOR_BIT_LEFT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 114 "lex.l"
{ printf("Found OPERATOR_BIT_RIGHT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 116 "lex.l"
{ printf("Found OPERATOR_AND: %s\n", yytext); return AND;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 117 "lex.l"
{ printf("Found OPERATOR_OR: %s\n", yytext); return OR;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "lex.l"
{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "lex.l"
{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "lex.l"
{ printf("Found OPERATOR_MUL_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "lex.l"
{ printf("Found OPERATOR_DIV_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "lex.l"
{ printf("Found OPERATOR_MOD_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "lex.l"
{ printf("Found OPERATOR_BIT_AND_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "lex.l"
{ printf("Found OPERATOR_BIT_OR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "lex.l"
{ printf("Found OPERATOR_BIT_XOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "lex.l"
{ printf("Found OPERATOR_BIT_LEFT_SHIFT_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "lex.l"
{ printf("Found OPERATOR_BIT_RIGHT_SHIFT_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "lex.l"
{ printf("Found OPERATOR_POINT: %s\n", yytext); return '.';}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "lex.l"
{ printf("Found OPERATOR_RANGE: %s\n", yytext); return RANGE;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "lex.l"
{ printf("Found OPERATOR_RANGE_ASSIGMENT: %s\n", yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "lex.l"
{ printf("Found OPERATOR_ARROW: %s\n", yytext); return RIGHT_ARROW;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "lex.l"
{ printf("Found LEFT_ROUND_BRACKET: %s\n", yytext); return '(';}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "lex.l"
{ printf("Found RIGHT_ROUND_BRACKET: %s\n", yytext); return ')';}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "lex.l"
{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); return '[';}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "lex.l"
{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); return ']';}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "lex.l"
{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext);  return '{';}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "lex.l"
{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); return '}';}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "lex.l"
{ printf("Found COMMA: %s\n", yytext); return ',';}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 "lex.l"
{ printf("Found SEMICOLON: %s\n", yytext); return ';';}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 144 "lex.l"
{ printf("Found COLON: %s\n", yytext); return ':';}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "lex.l"
{ printf("Found TWO_COLON: %s\n", yytext); return DOUBLEDOTS;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "lex.l"
{ strcpy(str,""); BEGIN(ML_COMMENT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "lex.l"
{ strcat(str,yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "lex.l"
{ strcat(str,yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "lex.l"
{ printf("Found ML_COMMENT: %s\n", str);  BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(ML_COMMENT):
#line 153 "lex.l"
{ printf("ML_COMMENT Error in line %d: comment are not closed\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "lex.l"
{ printf("Found COMMENT: %s\n", yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "lex.l"
{ stdstr = ""; BEGIN(STRING_EL); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "lex.l"
{ stdstr.push_back('\0'); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "lex.l"
{
    int x = strtol(yytext + 3,NULL, 16); 
    if(x <= 127)
    {
        char tmp[2];
        tmp[0] = x;
        tmp[1] = 0;
        stdstr += tmp;
    }
    else
    {
     printf("CHAR Error in line %d: Unicode is not support\n", lineNumber);
    }
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 180 "lex.l"
{
    char string[2];
    convertCharacterCodeToString(yytext, 2, string);
    stdstr += string;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 185 "lex.l"
{ cout << "Found STRING: " << stdstr << endl; BEGIN(INITIAL); yylval.string_literal = new string(stdstr); return STRING_LITERAL;}
	YY_BREAK
case YY_STATE_EOF(STRING_EL):
#line 186 "lex.l"
{ printf("STRING Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 187 "lex.l"
{ printf("STRING Error in line %d: slash\n", lineNumber); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 189 "lex.l"
{stdstr = ""; octothorpeCount = strlen(yytext) - 2; BEGIN(SHIELD_STRING);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 190 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 191 "lex.l"
{ stdstr += "\n"; lineNumber++; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 192 "lex.l"
{
    int tmp  = strlen(yytext) - 1;
    if(tmp == octothorpeCount)
    {
        cout << "Found RAW STRING: " << stdstr << endl; BEGIN(INITIAL);
        yylval.string_literal = new string(stdstr);
        return RAW_STRING_LITERAL;
    }
    else
    {
         stdstr += yytext;
    }

}
	YY_BREAK
case YY_STATE_EOF(SHIELD_STRING):
#line 206 "lex.l"
{ printf("SHIELD_STRING Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 209 "lex.l"
{ stdstr = ""; BEGIN(CHAR_EL); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 210 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 211 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 212 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 213 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 214 "lex.l"
{ stdstr.push_back('\0'); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 215 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 216 "lex.l"
{ stdstr += "\'"; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 217 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 218 "lex.l"
{
    int x = strtol(yytext + 3,NULL, 16);
    if(x <= 127)
    {
        char tmp[2];
        tmp[0] = x;
        tmp[1] = 0;
        stdstr += tmp;
    }
    else
    {
     printf("CHAR Error in line %d: Unicode is not support\n", lineNumber);
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 232 "lex.l"
{
    char string[2];
    convertCharacterCodeToString(yytext, 2, string);
    stdstr += string;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 237 "lex.l"
{
    if(stdstr.size() == 1) {
        cout << "Found CHAR:  " << stdstr << endl;
        yylval.char_literal = stdstr[0];
        return CHAR_LITERAL;
    }
    else if(stdstr.size() == 0)
    {
        printf("CHAR Error in line %d: empty char literal\n", lineNumber);
    }
    else
    {
        printf("CHAR Error in line %d: more than one char in quote\n", lineNumber);
    }
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(CHAR_EL):
#line 253 "lex.l"
{ printf("CHAR Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 254 "lex.l"
{ printf("CHAR Error in line %d: slash\n", lineNumber); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 256 "lex.l"
{

    strcpy(str, yytext);
    int second_dot_index = findSecondDot(str);
    int first_dot_index = second_dot_index - 1;
    int right_number_index = findRightNumberPos(&str[second_dot_index]) + second_dot_index;

    char left_number[50];
    char right_number[50];

    strncpy(left_number, str + 0, first_dot_index);
    left_number[first_dot_index] = '\0';

    int length = strlen(str) - right_number_index;
    strncpy(right_number, str + right_number_index, length);
    right_number[length] = '\0';

    int res = translateNumberByBase(left_number);
    if(res != -1) { yylval.int_literal = res; return INT_LITERAL; }
    int res2 = translateNumberByBase(right_number);
    if(res2 != -1) { yylval.int_literal = res2; return INT_LITERAL; }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 279 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    printf("Found DECIMAL_NUMBER: %d\n", atoi(str));
    yylval.int_literal = atoi(str);
    return INT_LITERAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 288 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    if(strlen(str) > 2)
    {
         printf("Found BIN_NUMBER: %d\n", strtol(str + 2, NULL, 2));
         yylval.int_literal = strtol(str + 2, NULL, 2);
         return INT_LITERAL;
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 304 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    if(strlen(str) > 2)
    {
         printf("Found OCTAL_NUMBER: %d\n", strtol(str + 2, NULL, 8));
         yylval.int_literal = strtol(str + 2, NULL, 8);
         return INT_LITERAL;
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 320 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    if(strlen(str) > 2)
    {
        printf("Found HEXADECIMAL_NUMBER: %d\n", strtol(str + 2, NULL, 16));
        yylval.int_literal = strtol(str + 2, NULL, 16);
        return INT_LITERAL;
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 336 "lex.l"
{
    printf("INCORRECT DOUBLE Error in line %d: float literals must have an integer part", lineNumber);
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 340 "lex.l"
{
    removeType(str, "f64");
    removeUnderline(str);
    printf("Found DOUBLE: %lf\n", atof(str), str);
    yylval.float_literal = atof(str);
    return FLOAT_LITERAL;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 348 "lex.l"
{
    removeType(str, "f64");
    removeUnderline(str);
    printf("Found DOUBLE: %lf\n", atof(str));
    yylval.float_literal = atof(str);
    return FLOAT_LITERAL;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 356 "lex.l"
{ printf("Found IDENTIFIER: %s\n", yytext); yylval.identifier = new string(yytext); return ID;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 357 "lex.l"
{ printf("Found MACROS: %s\n", yytext);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 358 "lex.l"
{ printf("Error in line %d: incorrect IDENTIFIER\n", lineNumber); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 359 "lex.l"
{ printf("Error in line %d: incorrect character in code\n", lineNumber); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 360 "lex.l"
ECHO;
	YY_BREAK
#line 1848 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 352 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 352 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 351);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 360 "lex.l"


void convertCharacterCodeToString(char characterCode[], int startPosition, char *string)
{
    string[0] = strtol(characterCode + startPosition,NULL, 16);
    string[1] = '\0';
}

void removeUnderline(char str[])
{
  int pos = 0;
  for(int i = 0; i < strlen(yytext); i++)
  {
        if(yytext[i] != '_')
        {
            str[pos++] = yytext[i];
        }
  }

  str[pos] = '\0';
  strcpy(yytext, str);
}

void removeType(char str[], char *typeName)
{
    strcpy(str, yytext);
    char* p = strstr(str, typeName);
    if(p != NULL)
    {
        int pos = strlen(str)  - strlen(typeName);
        str[pos] = 0;
    }
}

int findSecondDot(const char *input_string) {
    int first_dot = -1;  // Переменная для индекса первой точки

    for (int i = 0; input_string[i] != '\0'; i++) {
        if (input_string[i] == '.') {
            if (first_dot == -1) {
                first_dot = i;  // Нашли первую точку
            } else {
                printf("Found TWO_DOTS: %.*s\n", i - first_dot + 1, input_string + first_dot);
                return i;  // Нашли вторую точку, возвращаем её индекс
            }
        }
    }

    return -1;  // Второй символ точки не найден
}

int findRightNumberPos(const char *input_string) {

    for (int i = 0; input_string[i] != '\0'; i++) {
        if (input_string[i] >= '0' && input_string[i] <= '9') {
            return i;  // Нашли индекс начала второго числа
        }
    }

    return -1;  // второе число не нашлось
}

void removeSpacesAndUnderlines(char* input) {
    int len = strlen(input);
    int i, j = 0;

    for (i = 0; i < len; i++) {
        if (input[i] != ' ' && input[i] != '_') {
            input[j] = input[i];
            j++;
        }
    }
    input[j] = '\0';
}

int translateNumberByBase(char *input_string) {
    removeSpacesAndUnderlines(input_string);
    int len = strlen(input_string);
    int result = -1;

    if (len == 1 && (input_string[0] >= '0' && input_string[0] <= '9')) {
        printf("Found RANGE_DECIMAL_NUMBER: %d\n", atoi(input_string));
        result = atoi(input_string);
    } else if (len >= 2 && (input_string[0] >= '0' && input_string[0] <= '9') && (input_string[1] >= '0' && input_string[1] <= '9')) {
        printf("Found RANGE_DECIMAL_NUMBER: %d\n", atoi(input_string));
        result = atoi(input_string);
    }


    if (input_string[0] == '0' && (len > 2)){
        if (input_string[1] == 'x'){
            printf("Found RANGE_HEXADECIMAL_NUMBER: %ld\n", strtol(input_string + 2, NULL, 16));
            result = strtol(input_string + 2, NULL, 16);
        } else if (input_string[1] == 'b') {
            printf("Found RANGE_BIN_NUMBER: %ld\n", strtol(input_string + 2, NULL, 2));
            result = strtol(input_string + 2, NULL, 2);
        } else if (input_string[1] == 'o'){
            printf("Found RANGE_OCTAL_NUMBER: %ld\n", strtol(input_string + 2, NULL, 8));
            result = strtol(input_string + 2, NULL, 8);
        } else {
            printf("Found RANGE_DECIMAL_NUMBER: %d\n", atoi(input_string));
            result = atoi(input_string);
        }
    }

    return result; // не удалось произвести операцию перевода с числом
}

/*
int main(int argc, char** argv) {

    if (argc != 2) {
        printf("Filename is not found");
        return 1;
    }

    const char *filename= argv[1];
    
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("File opening error");
        return 1;
    }

    yyin = file;
    yylex();
    fclose(file);

    return 0;
} */


int main(int argc, char** argv) {

    if (argc != 2) {
        printf("Filename is not found");
        return 1;
    }

    const char *filename= argv[1];

    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("File opening error");
        return 1;
    }

    yyin = file;
    yyparse();
    fclose(file);

    return 0;
}