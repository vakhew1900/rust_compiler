/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
static yyconst short int yy_accept[331] =
    {   0,
        0,    0,    0,    0,    0,    0,   90,   90,    0,    0,
      137,  135,    2,    1,   59,   95,   49,   57,  112,   79,
       80,   47,   45,   85,   46,   75,   48,  125,  125,   87,
       86,   53,   50,   54,  132,  132,   81,   82,   60,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   83,   58,   84,  113,  123,  124,   96,
       97,  106,  107,   90,   91,   92,  109,  110,  111,   52,
       69,   63,   70,   67,   65,   66,   78,   76,  129,   89,
       94,   68,  130,  125,  134,  134,  125,  134,  134,  134,
      134,  134,   88,   61,   55,   51,   56,   62,  133,  132,

      132,  132,   72,    3,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,   12,  132,  132,  132,   14,
      132,   16,  132,  132,  132,  132,  132,  132,  108,    0,
      132,  132,  132,  132,  132,  132,  132,  132,  132,   71,
       64,  113,  120,  119,  117,  118,  114,  115,  116,    0,
        0,   96,  103,  101,  102,   98,   99,  100,    0,    0,
       90,   92,   92,   93,  109,  111,   77,  129,    0,    0,
       94,  130,    0,  134,    0,  131,  125,  134,  134,  134,
      126,  134,  134,  127,  128,   73,   74,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,   41,   42,  132,

       13,   39,   40,  132,   17,  132,  132,   20,  132,   22,
       23,   24,  132,  132,  132,  132,  132,  132,  132,  132,
      132,   35,  132,  132,    0,    0,    0,    0,    0,  129,
        0,  130,    0,    0,  131,  131,  134,  131,  125,  134,
      134,   27,  132,   38,  132,   44,  132,  132,  132,    8,
        9,  132,  132,   15,   18,  132,   21,  132,   26,  132,
      132,  132,  132,   32,   33,  132,  132,  132,    0,  122,
        0,  105,  129,  129,    0,  130,  130,  131,    0,  134,
      134,  134,  132,    4,    5,  132,    7,  132,   11,   19,
      132,  132,  132,   30,   31,  132,   36,   37,    0,    0,

        0,    0,  130,    0,  126,  127,  128,   43,  132,   10,
       25,   28,   29,   34,    0,    0,    0,    0,  131,  132,
        0,    0,    0,    0,    6,    0,  121,    0,  104,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   23,   25,   25,   26,   27,   28,
       29,   30,    1,    1,   31,   31,   31,   31,   32,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   34,   33,   33,   33,   33,   33,   33,   33,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   33,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   33,   63,   64,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[66] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    5,    1,
        1,    6,    7,    1,    7,    1,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    1,    1,    1,
        9,   10,   11,   11,    1,   12,    1,    1,   13,    9,
        9,    9,    9,   10,   14,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    1,    1,    1
    } ;

static yyconst short int yy_base[360] =
    {   0,
        0,    0,   57,   58,   65,   66,   69,   70,   71,   72,
      843,  844,  844,  844,  813,  844,  812,   70,  844,  844,
      844,  811,  810,  844,   50,   67,   83,   97,   43,  812,
      844,   69,  808,   76,  832,  119,  844,  844,  806,  104,
      120,  130,  128,  158,  163,  121,  160,  103,  165,  162,
      131,  177,  184,  844,  104,  844,    0,  844,  185,    0,
      844,  844,  199,    0,  844,   97,    0,  844,  828,  844,
      844,  844,  844,  844,  844,  844,  844,  802,  180,  844,
        0,  844,  243,  175,    0,  276,  286,  183,  806,  803,
      251,  317,  844,  794,  844,  844,  844,  788,  844,  812,

      122,  192,  844,  806,  188,  195,  187,  193,  219,  222,
      191,  201,  107,  226,  203,  805,  228,  230,  281,  799,
      272,  798,  275,  234,  276,  308,  288,  240,  844,  308,
      318,  273,  289,  311,  312,  315,  316,  280,  339,  844,
      844,    0,  844,  844,  844,  844,  844,  844,  844,  738,
      358,    0,  844,  844,  844,  844,  844,  844,  737,  370,
        0,  779,  338,  844,    0,  789,  844,  341,  351,  765,
        0,  352,  764,    0,  380,  388,    0,    0,  758,  760,
      396,  758,  759,  727,  726,  844,  844,  282,  370,  278,
      313,  364,  367,  391,  412,  413,  416,  769,  768,  417,

      765,  764,  758,  418,  757,  421,  424,  756,  425,  751,
      750,  744,  422,  426,  427,  428,  430,  433,  432,  434,
      437,  743,  435,  438,    0,    0,    0,    0,  473,  701,
      718,  408,  430,  717,  692,    0,  712,    0,    0,  695,
      691,  707,  447,  705,  451,  693,  445,  453,  443,  691,
      667,  450,  459,  663,  659,  442,  651,  454,  649,  458,
      466,  455,  457,  645,  638,  468,  463,  475,  596,  844,
      591,  844,  584,  844,  502,  583,  844,  582,  544,  547,
      546,  545,  500,  560,  559,  478,  558,  479,  557,  556,
      481,  507,  461,  555,  554,  508,  553,  549,  512,  511,

      509,  508,  500,  522,    0,    0,    0,  538,  511,  537,
      536,  535,  534,  528,  411,  315,  307,  216,  844,  512,
      282,  213,  478,   71,   99,  489,  844,  490,  844,  844,
      569,  583,  597,  611,  623,  637,  651,  665,  679,  693,
      700,  714,  721,  527,  728,  735,  742,  749,  756,  763,
      529,  770,  777,  784,  791,  798,  805,  812,  819
    } ;

static yyconst short int yy_def[360] =
    {   0,
      330,    1,  331,  331,  332,  332,  333,  333,  334,  334,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,   28,  330,
      330,  330,  330,  330,  335,  335,  330,  330,  330,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  330,  330,  330,  336,  330,  330,  337,
      330,  330,  330,  338,  330,  339,  340,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  341,  330,
      342,  330,  330,   28,  343,  343,  343,  343,  343,  343,
      343,  343,  330,  330,  330,  330,  330,  330,  330,  335,

      335,  335,  330,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  330,  330,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  330,
      330,  336,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  337,  330,  330,  330,  330,  330,  330,  330,  330,
      338,  339,  339,  330,  340,  330,  330,  341,  344,  330,
      342,  345,  330,  343,  330,  343,   87,   86,  343,  343,
      343,  343,  343,   91,   92,  330,  330,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  346,  347,  348,  349,  330,  350,
      330,  345,  351,  330,  352,  176,  343,  343,  343,  343,
      343,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  353,  330,
      354,  330,  350,  330,  330,  355,  330,  352,  330,  343,
      343,  343,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  356,  353,

      357,  354,  355,  330,  343,  343,  343,  335,  335,  335,
      335,  335,  335,  335,  358,  356,  359,  357,  330,  335,
      330,  358,  330,  359,  335,  330,  330,  330,  330,    0,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330
    } ;

static yyconst short int yy_nxt[910] =
    {   0,
       12,   13,   14,   15,   16,   12,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   30,   31,   32,   33,   34,
       35,   35,   35,   36,   37,   12,   38,   39,   35,   40,
       41,   42,   35,   43,   44,   35,   35,   45,   35,   46,
       47,   35,   35,   48,   49,   50,   51,   52,   35,   53,
       35,   35,   54,   55,   56,   58,   58,   61,   61,   62,
       62,   65,   65,   68,   68,   69,   69,   72,   76,   77,
       66,   66,   78,   85,   79,   79,   79,   79,   79,   79,
       79,   79,   59,   59,   80,   85,   94,   95,   73,   81,

       63,   63,   99,   85,   97,   98,   99,   99,  163,  324,
       99,   82,   83,  164,   84,   84,   84,   84,   84,   84,
       84,   84,   99,   99,   99,   99,  198,   85,   86,   85,
       85,   99,  140,   99,   99,   87,   85,   88,   85,   85,
       86,   89,   85,   85,   90,   85,   85,   85,   85,   91,
       85,   85,   85,   85,   85,   85,   85,   92,   85,  104,
      128,   99,  101,   99,  123,   99,   99,  141,   99,  129,
      130,  188,  105,  124,  106,  102,  107,  110,  113,  111,
       99,  114,  108,  118,  109,  135,  119,   99,  112,  143,
       99,   99,  136,  144,   99,   99,   99,  115,   99,  125,

      181,  181,  145,  153,   99,  132,   99,  120,  131,  116,
      117,  169,  126,  121,  122,   85,  154,  127,  133,  134,
      146,  181,   99,  169,  170,   99,  192,   85,  137,   99,
      139,   99,  138,   99,  155,   85,  147,   99,  191,  148,
      190,  149,  150,   99,  193,  151,  189,  199,  196,  202,
      156,  322,  200,  157,  318,  158,  159,  197,  194,  160,
      172,  172,  172,  172,  172,  172,  172,  172,  184,  184,
      184,  184,  184,  184,  184,   99,   99,  195,   99,   99,
      211,   99,  201,   99,   99,   99,  206,  173,  175,  184,
      175,   99,   99,  176,  176,  176,  176,  176,  176,  176,

      176,   83,  203,  177,  177,  177,  177,  177,  177,  177,
      177,   99,  129,  130,   99,   99,   99,  178,   99,   99,
      326,   99,  214,  222,  177,  204,  242,  244,  215,  178,
      179,  205,  207,  180,  185,  185,  185,  185,  185,  185,
      185,  185,   99,  216,  210,  324,  327,  185,  185,  163,
      208,  218,  245,  316,  164,  185,  185,  185,  185,  185,
      185,  185,  212,  229,  217,  229,  209,   99,  220,  219,
       99,  221,  169,   99,  213,  226,  226,  226,  226,  226,
      226,  226,  223,  233,  169,  170,  224,  228,  228,  228,
      228,  228,  228,  228,   99,  233,  173,  235,  235,  235,

      235,  235,  235,  235,  235,  236,  236,  236,  236,  236,
      236,  236,  236,  181,  181,   99,   99,  243,  246,   99,
       99,   99,  247,  248,   99,   99,  236,   99,   99,   99,
       99,   99,  179,   99,  181,   99,   99,   99,   99,  233,
       99,   99,  275,  237,  275,   99,   99,  249,   99,  322,
       99,  233,  173,   99,   99,  250,   99,   99,   99,  252,
       99,   99,   99,  251,   99,  256,   99,  254,  257,   99,
      259,   99,  253,  262,  255,  264,  266,  265,   99,  258,
      263,   99,   99,  260,   99,  261,  287,  268,  290,  267,
      230,  230,  230,  230,  230,  230,  230,  230,  283,  284,

      286,  285,  289,   99,  288,  292,  297,  293,  291,  294,
       99,   99,  296,  295,   99,   99,  328,  313,  298,  276,
      276,  276,  276,  276,  276,  276,  276,  326,  328,  309,
      310,   99,  311,  230,  230,  276,  276,   99,   99,   99,
       99,   99,  329,  319,  173,  308,  302,  318,  312,  300,
      316,  314,   99,  327,  329,  325,   99,   99,   99,   99,
       99,   99,   99,   99,  307,  306,  305,  304,  320,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,  100,  279,  173,  170,  302,
      100,  100,  100,  100,  300,  100,  100,  142,  142,  142,
      142,   99,  142,  142,  142,  142,  142,  142,   99,  142,
      142,  152,   99,  152,   99,  152,  152,  152,  152,  152,
      152,  152,   99,  152,  152,  161,   99,  161,  161,  161,
       99,  161,  161,  161,  161,  161,  161,  161,  161,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  165,   99,  165,   99,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  168,   99,  168,
       99,  282,  168,  168,  171,  281,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  174,  174,
      174,  174,  280,  174,  174,  232,  279,  232,  277,  274,
      232,  232,  269,  269,  269,  170,   99,   99,  269,  270,
      270,  270,  270,   99,   99,  270,  271,  271,  271,   99,
       99,   99,  271,  272,  272,  272,  272,   99,   99,  272,
      273,   99,   99,  241,  240,  273,  273,  278,  239,  238,
      183,  182,  278,  278,  299,  299,  299,  234,  231,  299,
      299,  301,  301,  301,  166,  330,  301,  301,  303,  227,

      225,   99,   99,  303,  303,  315,  315,  315,   99,   99,
      315,  315,  317,  317,  317,   99,  187,  317,  317,  321,
      321,  321,  186,  183,  321,  321,  323,  323,  323,  182,
      167,  323,  323,  166,  103,   99,   96,   93,   75,   74,
       71,   70,  330,   11,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330
    } ;

static yyconst short int yy_chk[910] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    6,    5,
        6,    7,    8,    9,   10,    9,   10,   18,   25,   25,
        7,    8,   26,   29,   26,   26,   26,   26,   26,   26,
       26,   26,    3,    4,   27,   29,   32,   32,   18,   27,

        5,    6,  325,   29,   34,   34,   48,   40,   66,  324,
      113,   27,   28,   66,   28,   28,   28,   28,   28,   28,
       28,   28,   36,   41,   46,  101,  113,   28,   28,   28,
       28,   43,   55,   42,   51,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   40,
       48,   44,   36,   47,   46,   50,   45,   55,   49,   49,
       49,  101,   41,   46,   41,   36,   42,   43,   44,   43,
       52,   44,   42,   45,   42,   51,   45,   53,   43,   59,
      107,  105,   51,   59,  111,  102,  108,   44,  106,   47,

       88,   88,   59,   63,  112,   50,  115,   45,   49,   44,
       44,   79,   47,   45,   45,   84,   63,   47,   50,   50,
       59,   88,  109,   79,   79,  110,  107,   84,   52,  114,
       53,  117,   52,  118,   63,   84,   59,  124,  106,   59,
      105,   59,   59,  128,  108,   59,  102,  114,  111,  118,
       63,  322,  115,   63,  318,   63,   63,  112,  109,   63,
       83,   83,   83,   83,   83,   83,   83,   83,   91,   91,
       91,   91,   91,   91,   91,  121,  132,  110,  123,  125,
      128,  190,  117,  138,  119,  188,  124,   83,   86,   91,
       86,  127,  133,   86,   86,   86,   86,   86,   86,   86,

       86,   87,  119,   87,   87,   87,   87,   87,   87,   87,
       87,  126,  130,  130,  134,  135,  191,   87,  136,  137,
      321,  131,  132,  138,   87,  121,  188,  190,  133,   87,
       87,  123,  125,   87,   92,   92,   92,   92,   92,   92,
       92,   92,  139,  133,  127,  317,  321,   92,   92,  163,
      126,  135,  191,  316,  163,   92,   92,   92,   92,   92,
       92,   92,  131,  169,  134,  169,  126,  192,  136,  135,
      193,  137,  168,  189,  131,  151,  151,  151,  151,  151,
      151,  151,  139,  172,  168,  168,  139,  160,  160,  160,
      160,  160,  160,  160,  194,  172,  172,  175,  175,  175,

      175,  175,  175,  175,  175,  176,  176,  176,  176,  176,
      176,  176,  176,  181,  181,  195,  196,  189,  192,  197,
      200,  204,  193,  193,  206,  213,  176,  207,  209,  214,
      215,  216,  176,  217,  181,  219,  218,  220,  223,  232,
      221,  224,  233,  181,  233,  256,  249,  194,  247,  315,
      243,  232,  232,  252,  245,  195,  248,  258,  262,  197,
      263,  260,  253,  196,  293,  207,  267,  204,  209,  261,
      214,  266,  200,  217,  206,  219,  221,  220,  268,  213,
      218,  286,  288,  215,  291,  216,  249,  224,  256,  223,
      229,  229,  229,  229,  229,  229,  229,  229,  243,  245,

      248,  247,  253,  283,  252,  260,  267,  261,  258,  262,
      292,  296,  266,  263,  309,  320,  323,  293,  268,  275,
      275,  275,  275,  275,  275,  275,  275,  326,  328,  286,
      288,  314,  291,  344,  344,  351,  351,  313,  312,  311,
      310,  308,  323,  304,  303,  283,  302,  301,  292,  300,
      299,  296,  298,  326,  328,  320,  297,  295,  294,  290,
      289,  287,  285,  284,  282,  281,  280,  279,  309,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  335,  278,  276,  273,  271,
      335,  335,  335,  335,  269,  335,  335,  336,  336,  336,
      336,  265,  336,  336,  336,  336,  336,  336,  264,  336,
      336,  337,  259,  337,  257,  337,  337,  337,  337,  337,
      337,  337,  255,  337,  337,  338,  254,  338,  338,  338,
      251,  338,  338,  338,  338,  338,  338,  338,  338,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  340,  250,  340,  246,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  341,  244,  341,
      242,  241,  341,  341,  342,  240,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  343,  343,
      343,  343,  237,  343,  343,  345,  235,  345,  234,  231,
      345,  345,  346,  346,  346,  230,  222,  212,  346,  347,
      347,  347,  347,  211,  210,  347,  348,  348,  348,  208,
      205,  203,  348,  349,  349,  349,  349,  202,  201,  349,
      350,  199,  198,  185,  184,  350,  350,  352,  183,  182,
      180,  179,  352,  352,  353,  353,  353,  173,  170,  353,
      353,  354,  354,  354,  166,  162,  354,  354,  355,  159,

      150,  122,  120,  355,  355,  356,  356,  356,  116,  104,
      356,  356,  357,  357,  357,  100,   98,  357,  357,  358,
      358,  358,   94,   90,  358,  358,  359,  359,  359,   89,
       78,  359,  359,   69,   39,   35,   33,   30,   23,   22,
       17,   15,   11,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lex.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define CHAR 1

#define STRING 2

#define ML_COMMENT 3

#define SHIELD_STRING 4

#line 12 "lex.l"
	#include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <iostream>
    #include <string>
    #include <ctype.h>
    using namespace std;

    void removeUnderline(char str[]);
    void removeType(char str[], char *typeName);
    void convertCharacterCodeToString(char characterCode[], int startPosition, char *string);
#line 700 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 25 "lex.l"



    char str[1024];
    string stdstr = "";
    int lineNumber = 1;
    int octothorpeCount = 0;


#line 857 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 331 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 844 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 35 "lex.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lex.l"
{ printf("Found KW_AS: %s\n", yytext); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "lex.l"
{ printf("Found KW_BREAK: %s\n", yytext); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 39 "lex.l"
{ printf("Found KW_CONST: %s\n", yytext); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "lex.l"
{ printf("Found KW_CONTINUE: %s\n", yytext); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "lex.l"
{ printf("Found KW_CRATE: %s\n", yytext); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "lex.l"
{ printf("Found KW_ELSE: %s\n", yytext); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "lex.l"
{ printf("Found KW_ENUM: %s\n", yytext); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "lex.l"
{ printf("Found KW_EXTERN: %s\n", yytext); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "lex.l"
{ printf("Found KW_FALSE: %s\n", yytext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "lex.l"
{ printf("Found KW_FN: %s\n", yytext); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "lex.l"
{ printf("Found KW_FOR: %s\n", yytext); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "lex.l"
{ printf("Found KW_IF: %s\n", yytext); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "lex.l"
{ printf("Found KW_IMPL: %s\n", yytext); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "lex.l"
{ printf("Found KW_IN: %s\n", yytext); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "lex.l"
{ printf("Found KW_LET: %s\n", yytext); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "lex.l"
{ printf("Found KW_LOOP: %s\n", yytext); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "lex.l"
{ printf("Found KW_MATCH: %s\n", yytext); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "lex.l"
{ printf("Found KW_MOD: %s\n", yytext); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "lex.l"
{ printf("Found KW_MOVE: %s\n", yytext); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "lex.l"
{ printf("Found KW_MUT: %s\n", yytext); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "lex.l"
{ printf("Found KW_PUB: %s\n", yytext); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "lex.l"
{ printf("Found KW_REF: %s\n", yytext); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "lex.l"
{ printf("Found KW_RETURN: %s\n", yytext); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "lex.l"
{ printf("Found KW_SELFVALUE: %s\n", yytext); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "lex.l"
{ printf("Found KW_SELFTYPE: %s\n", yytext); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "lex.l"
{ printf("Found KW_STATIC: %s\n", yytext); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "lex.l"
{ printf("Found KW_STRUCT: %s\n", yytext); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "lex.l"
{ printf("Found KW_SUPER: %s\n", yytext); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "lex.l"
{ printf("Found KW_TRAIT: %s\n", yytext); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "lex.l"
{ printf("Found KW_TRUE: %s\n", yytext); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "lex.l"
{ printf("Found KW_TYPE: %s\n", yytext); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "lex.l"
{ printf("Found KW_UNSAFE: %s\n", yytext); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "lex.l"
{ printf("Found KW_USE: %s\n", yytext); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "lex.l"
{ printf("Found KW_WHERE: %s\n", yytext); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "lex.l"
{ printf("Found KW_WHILE: %s\n", yytext); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 74 "lex.l"
{ printf("Found TYPE_BOOL: %s\n", yytext); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 75 "lex.l"
{ printf("Found TYPE_I32: %s\n", yytext); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 76 "lex.l"
{ printf("Found TYPE_I64: %s\n", yytext); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 77 "lex.l"
{ printf("Found TYPE_F32: %s\n", yytext); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 78 "lex.l"
{ printf("Found TYPE_F64: %s\n", yytext); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 79 "lex.l"
{ printf("Found TYPE_STRING: %s\n", yytext); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 80 "lex.l"
{ printf("Found TYPE_CHAR: %s\n", yytext); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 83 "lex.l"
{ printf("Found OPERATOR_PLUS: %s\n", yytext); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 84 "lex.l"
{ printf("Found OPERATOR_MINUS: %s\n", yytext); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 85 "lex.l"
{ printf("Found OPERATOR_MUL: %s\n", yytext); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 86 "lex.l"
{ printf("Found OPERATOR_DIV: %s\n", yytext); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 87 "lex.l"
{ printf("Found OPERATOR_MOD: %s\n", yytext); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 89 "lex.l"
{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 90 "lex.l"
{ printf("Found OPERATOR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 91 "lex.l"
{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 92 "lex.l"
{ printf("Found OPERATOR_LESS: %s\n", yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 93 "lex.l"
{ printf("Found OPERATOR_MORE: %s\n", yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 94 "lex.l"
{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 95 "lex.l"
{ printf("Found OPERATOR_MORE_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 97 "lex.l"
{ printf("Found OPERATOR_AMPERSAND: %s\n", yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 98 "lex.l"
{ printf("Found OPERATOR_BIT_OR: %s\n", yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 99 "lex.l"
{ printf("Found OPERATOR_BIT_NOT: %s\n", yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 100 "lex.l"
{ printf("Found OPERATOR_BIT_XOR: %s\n", yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 101 "lex.l"
{ printf("Found OPERATOR_BIT_LEFT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 102 "lex.l"
{ printf("Found OPERATOR_BIT_RIGHT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 104 "lex.l"
{ printf("Found OPERATOR_AND: %s\n", yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 105 "lex.l"
{ printf("Found OPERATOR_OR: %s\n", yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 107 "lex.l"
{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 108 "lex.l"
{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 109 "lex.l"
{ printf("Found OPERATOR_MUL_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 110 "lex.l"
{ printf("Found OPERATOR_DIV_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 111 "lex.l"
{ printf("Found OPERATOR_MOD_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 112 "lex.l"
{ printf("Found OPERATOR_BIT_AND_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 113 "lex.l"
{ printf("Found OPERATOR_BIT_OR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 114 "lex.l"
{ printf("Found OPERATOR_BIT_XOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "lex.l"
{ printf("Found OPERATOR_BIT_LEFT_SHIFT_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "lex.l"
{ printf("Found OPERATOR_BIT_RIGHT_SHIFT_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 118 "lex.l"
{ printf("Found OPERATOR_POINT: %s\n", yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 119 "lex.l"
{ printf("Found OPERATOR_RANGE: %s\n", yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 120 "lex.l"
{ printf("Found OPERATOR_RANGE_ASSIGMENT: %s\n", yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 121 "lex.l"
{ printf("Found OPERATOR_ARROW: %s\n", yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "lex.l"
{ printf("Found LEFT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "lex.l"
{ printf("Found RIGHT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "lex.l"
{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "lex.l"
{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "lex.l"
{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "lex.l"
{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 130 "lex.l"
{ printf("Found COMMA: %s\n", yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 131 "lex.l"
{ printf("Found SEMICOLON: %s\n", yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 132 "lex.l"
{ printf("Found COLON: %s\n", yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 133 "lex.l"
{ printf("Found TWO_COLON: %s\n", yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 136 "lex.l"
{ strcpy(str,""); BEGIN(ML_COMMENT); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 137 "lex.l"
{ strcat(str,yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 138 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 139 "lex.l"
{ strcat(str,yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 140 "lex.l"
{ printf("Found ML_COMMENT: %s\n", str);  BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(ML_COMMENT):
#line 141 "lex.l"
{ printf("ML_COMMENT Error in line %d: comment are not closed\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 143 "lex.l"
{ printf("Found COMMENT: %s\n", yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 145 "lex.l"
{ stdstr = ""; BEGIN(STRING); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 146 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 147 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 148 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 149 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 150 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 151 "lex.l"
{ stdstr.push_back('\0'); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 152 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 153 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 154 "lex.l"
{
    int x = strtol(yytext + 3,NULL, 16); 
    if(x <= 127)
    {
        char tmp[2];
        tmp[0] = x;
        tmp[1] = 0;
        stdstr += tmp;
    }
    else
    {
     printf("CHAR Error in line %d: Unicode is not support\n", lineNumber);
    }
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 168 "lex.l"
{
    char string[2];
    convertCharacterCodeToString(yytext, 2, string);
    stdstr += string;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 173 "lex.l"
{ cout << "Found STRING: " << stdstr << endl; BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 174 "lex.l"
{ printf("STRING Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 175 "lex.l"
{ printf("STRING Error in line %d: slash\n", lineNumber); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 177 "lex.l"
{stdstr = ""; octothorpeCount = strlen(yytext) - 2; BEGIN(SHIELD_STRING);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 178 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 179 "lex.l"
{ stdstr += "\n"; lineNumber++; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 180 "lex.l"
{
    int tmp  = strlen(yytext) - 1;
    if(tmp == octothorpeCount)
    {
        cout << "Found STRING: " << stdstr << endl; BEGIN(INITIAL);
    }
    else
    {
         stdstr += yytext;
    }

}
	YY_BREAK
case YY_STATE_EOF(SHIELD_STRING):
#line 192 "lex.l"
{ printf("SHIELD_STRING Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 195 "lex.l"
{ stdstr = ""; BEGIN(CHAR); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 196 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 197 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 198 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 199 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 200 "lex.l"
{ stdstr.push_back('\0'); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 201 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 202 "lex.l"
{ stdstr += "\'"; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 203 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 204 "lex.l"
{
    int x = strtol(yytext + 3,NULL, 16);
    if(x <= 127)
    {
        char tmp[2];
        tmp[0] = x;
        tmp[1] = 0;
        stdstr += tmp;
    }
    else
    {
     printf("CHAR Error in line %d: Unicode is not support\n", lineNumber);
    }
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 218 "lex.l"
{
    char string[2];
    convertCharacterCodeToString(yytext, 2, string);
    stdstr += string;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 223 "lex.l"
{
    if(stdstr.size() == 1) {
        cout << "Found CHAR:  " << stdstr << endl;
    }
    else if(stdstr.size() == 0)
    {
        printf("CHAR Error in line %d: empty char literal\n", lineNumber);
    }
    else
    {
        printf("CHAR Error in line %d: more than one char in quote\n", lineNumber);
    }
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(CHAR):
#line 237 "lex.l"
{ printf("CHAR Error in line %d: there is no closing quotation mark\n", lineNumber); BEGIN(INITIAL);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 238 "lex.l"
{ printf("CHAR Error in line %d: slash\n", lineNumber); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 241 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    printf("Found DECIMAL_NUMBER: %d\n", atoi(str));
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 248 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    if(strlen(str) > 2)
    {
         printf("Found BIN_NUMBER: %d\n", strtol(str + 2, NULL, 2));
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 262 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    if(strlen(str) > 2)
    {
         printf("Found OCTAL_NUMBER: %d\n", strtol(str + 2, NULL, 8));
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 276 "lex.l"
{

    removeType(str, "i32");
    removeUnderline(str);
    if(strlen(str) > 2)
    {
         printf("Found HEXADECIMAL_NUMBER: %d\n", strtol(str + 2, NULL, 16));
    }
    else
    {
        printf("NUMBER Error in line %d: incorrect format\n", lineNumber);
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 290 "lex.l"
{
    printf("INCORRECT DOUBLE Error in line %d: float literals must have an integer part", lineNumber);
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 294 "lex.l"
{
    removeType(str, "f64");
    removeUnderline(str);
    printf("Found DOUBLE: %lf\n", atof(str), str);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 300 "lex.l"
{
    removeType(str, "f64");
    removeUnderline(str);
    printf("Found DOUBLE: %lf\n", atof(str));
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 306 "lex.l"
{ printf("Found IDENTIFIER: %s\n", yytext);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 307 "lex.l"
{ printf("Found MACROS: %s\n", yytext);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 308 "lex.l"
{ printf("Error in line %d: incorrect IDENTIFIER\n", lineNumber); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 309 "lex.l"
{ printf("Error in line %d: incorrect character in code\n", lineNumber); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 310 "lex.l"
ECHO;
	YY_BREAK
#line 1745 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 331 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 331 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 330);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 310 "lex.l"


void convertCharacterCodeToString(char characterCode[], int startPosition, char *string)
{
    string[0] = strtol(characterCode + startPosition,NULL, 16);
    string[1] = '\0';
}

void removeUnderline(char str[])
{
  int pos = 0;
  for(int i = 0; i < strlen(yytext); i++)
  {
        if(yytext[i] != '_')
        {
            str[pos++] = yytext[i];
        }
  }

  str[pos] = '\0';
  strcpy(yytext, str);
}

void removeType(char str[], char *typeName)
{
    strcpy(str, yytext);
    char* p = strstr(str, typeName);
    if(p != NULL)
    {
        int pos = strlen(str)  - strlen(typeName);
        str[pos] = 0;
    }
}

int main(int argc, char** argv) {

    if (argc != 2) {
        printf("Filename is not found");
        return 1;
    }

    const char *filename= argv[1];
    
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("File opening error");
        return 1;
    }

    yyin = file;
    yylex();
    fclose(file);

    return 0;
}


